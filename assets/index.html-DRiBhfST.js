import{_ as n,o as s,c as a,a as p}from"./app-BzeNYtxQ.js";const e={},t=p(`<h1 id="python" tabindex="-1"><a class="header-anchor" href="#python"><span>Python</span></a></h1><p>视频链接：https://www.bilibili.com/video/BV1qW4y1a7fU?p=14&amp;vd_source=58161f8e8dab38b1ec22c77ea9cc9e71</p><p>官网文档：https://docs.python.org/</p><p>仅供参考</p><h4 id="集成开发环境-pycharm" tabindex="-1"><a class="header-anchor" href="#集成开发环境-pycharm"><span>集成开发环境 - PyCharm</span></a></h4><h2 id="_1-基础语法" tabindex="-1"><a class="header-anchor" href="#_1-基础语法"><span>1 基础语法</span></a></h2><h3 id="_1-0-字面量" tabindex="-1"><a class="header-anchor" href="#_1-0-字面量"><span>1.0 字面量</span></a></h3><p>​ 字面量：在代码中，被<strong>写下来</strong>的的固定的<strong>值</strong>，称之为字面量</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span> 	此处的	<span class="token string">&#39;hello world&#39;</span>	就是string 字面量</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ 注释</p><p>​ 单行注释与多行注释</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token comment"># a = 10 单行注释</span></span>
<span class="line"><span class="token comment"># print(a);</span></span>
<span class="line"><span class="token triple-quoted-string string">&quot;&quot;&quot; print(&#39;1111&#39;)</span>
<span class="line">    print(&#39;2222&#39;)</span>
<span class="line">    print(&#39;3333&#39;)</span>
<span class="line">&quot;&quot;&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-1-变量和类型" tabindex="-1"><a class="header-anchor" href="#_1-1-变量和类型"><span>1.1 变量和类型</span></a></h3><h4 id="类型" tabindex="-1"><a class="header-anchor" href="#类型"><span>类型</span></a></h4><p>在编程语言中，<strong>变量是数据的载体</strong>，简单的说就是一块用来保存数据的内存空间，<strong>变量的值可以被读取和修改</strong>，这是所有运算和控制的基础</p><p>Python 语言中预设了多种数据类型，也允许我们自定义新的数据类型，这一点在后面会讲到。我们首先来了解几种 Python 中最为常用的数据类型。</p><ol><li><p>整型（<code>int</code>）：Python 中可以处理任意大小的整数，而且支持二进制（如<code>0b100</code>，换算成十进制是4）、八进制（如<code>0o100</code>，换算成十进制是64）、十进制（<code>100</code>）和十六进制（<code>0x100</code>，换算成十进制是256）的表示法</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">0b100</span><span class="token punctuation">)</span>  <span class="token comment"># 二进制整数 4</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">0o100</span><span class="token punctuation">)</span>  <span class="token comment"># 八进制整数 64</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>    <span class="token comment"># 十进制整数 100</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span>  <span class="token comment"># 十六进制整数 256</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>浮点型（<code>float</code>）：浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，浮点数除了数学写法（如<code>123.456</code>）之外还支持科学计数法（如<code>1.23456e2</code>，表示$\\small{1.23456 \\times 10^{2}}$）。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">123.456</span><span class="token punctuation">)</span>    <span class="token comment"># 数学写法</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>字符串型（<code>str</code>）：字符串是以单引号或双引号包裹起来的任意文本，比如<code>&#39;hello&#39;</code>和<code>&quot;hello&quot;</code>。</p></li><li><p>布尔型（<code>bool</code>）：布尔型只有<code>True</code>、<code>False</code>两种值，要么是<code>True</code>，要么是<code>False</code>，可以用来表示现实世界中的“是”和“否”，命题的“真”和“假”，状况的“好”与“坏”，水平的“高”与“低”等等。如果一个变量的值只有两种状态，我们就可以使用布尔型。</p></li></ol><h4 id="变量" tabindex="-1"><a class="header-anchor" href="#变量"><span>变量</span></a></h4><p>对于每个变量，我们都需要给它取一个名字，就如同我们每个人都有自己的名字一样。在 Python 中，变量命名需要遵循以下的规则和惯例。</p><ul><li>规则部分： <ul><li>规则1：变量名由<strong>字母</strong>、<strong>数字</strong>和<strong>下划线</strong>构成，数字不能开头。需要说明的是，这里说的字母指的是 Unicode 字符，Unicode 称为万国码，囊括了世界上大部分的文字系统，这也就意味着中文、日文、希腊字母等都可以作为变量名中的字符，但是一些特殊字符（如：<code>！</code>、<code>@</code>、<code>#</code>等）是不能出现在变量名中的。我们强烈建议大家把这里说的字母理解为<strong>尽可能只使用英文字母</strong>。</li><li>规则2：Python 是<strong>大小写敏感</strong>的编程语言，简单的说就是大写的<code>A</code>和小写的<code>a</code>是两个不同的变量，这一条其实并不算规则，而是需要大家注意的地方。</li><li>规则3：变量名<strong>不要跟 Python 的关键字重名</strong>，<strong>尽可能避开 Python 的保留字</strong>。这里的关键字是指在 Python 程序中有特殊含义的单词（如：<code>is</code>、<code>if</code>、<code>else</code>、<code>for</code>、<code>while</code>、<code>True</code>、<code>False</code>等），保留字主要指 Python 语言内置函数、内置模块等的名字（如：<code>int</code>、<code>print</code>、<code>input</code>、<code>str</code>、<code>math</code>、<code>os</code>等）。</li></ul></li><li>惯例部分： <ul><li>惯例1：变量名通常使用小写英文字母，多个单词用下划线进行连接。</li><li>惯例2：受保护的变量用单个下划线开头。</li><li>惯例3：私有的变量用两个下划线开头。</li></ul></li></ul><h4 id="变量的使用" tabindex="-1"><a class="header-anchor" href="#变量的使用"><span>变量的使用</span></a></h4><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">a <span class="token operator">=</span> <span class="token number">45</span></span>
<span class="line">b <span class="token operator">=</span> <span class="token number">40</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>  <span class="token comment"># 45 40</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token comment"># 85</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span> <span class="token comment"># 5</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">*</span> b<span class="token punctuation">)</span> <span class="token comment"># 1800</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">/</span> b<span class="token punctuation">)</span> <span class="token comment"># 1.125</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="检验变量类型" tabindex="-1"><a class="header-anchor" href="#检验变量类型"><span>检验变量类型</span></a></h4><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">a <span class="token operator">=</span> <span class="token number">100</span></span>
<span class="line">b <span class="token operator">=</span> <span class="token number">123.45</span></span>
<span class="line">c <span class="token operator">=</span> <span class="token string">&#39;hello, world&#39;</span></span>
<span class="line">d <span class="token operator">=</span> <span class="token boolean">True</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># &lt;class &#39;int&#39;&gt;</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># &lt;class &#39;float&#39;&gt;</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># &lt;class &#39;str&#39;&gt;</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># &lt;class &#39;bool&#39;&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以通过 Python 内置的函数来改变变量的类型，下面是一些常用的和变量类型相关的函数。</p><ul><li><code>int()</code>：将一个数值或字符串转换成整数，可以指定进制。</li><li><code>float()</code>：将一个字符串（在可能的情况下）转换成浮点数。</li><li><code>str()</code>：将指定的对象转换成字符串形式，可以指定编码方式。</li><li><code>chr()</code>：将整数（字符编码）转换成对应的（一个字符的）字符串。</li><li><code>ord()</code>：将（一个字符的）字符串转换成对应的整数（字符编码）。</li></ul><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">a <span class="token operator">=</span> <span class="token number">100</span></span>
<span class="line">b <span class="token operator">=</span> <span class="token number">123.55</span></span>
<span class="line">c <span class="token operator">=</span> <span class="token string">&#39;1231&#39;</span></span>
<span class="line">d <span class="token operator">=</span> <span class="token string">&#39;100&#39;</span></span>
<span class="line">e <span class="token operator">=</span> <span class="token string">&#39;123.45&#39;</span></span>
<span class="line">f <span class="token operator">=</span> <span class="token string">&#39;hello, world&#39;</span></span>
<span class="line">g <span class="token operator">=</span> <span class="token boolean">True</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># int类型的100转成float，输出100.0</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># float类型的123.45转成int，输出123 直接省略后面小数点</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># str类型的&#39;123&#39;转成int，输出123 --int() 函数在将字符串转换为整数时，要求字符串必须是有效的整数形式 否则会引发 ValueError</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> base<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># str类型的&#39;123&#39;按十六进制转成int，输出291</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> base<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># str类型的&#39;100&#39;按二进制转成int，输出4</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment"># str类型的&#39;123.45&#39;转成float，输出123.45</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token comment"># str类型的&#39;hello, world&#39;转成bool，输出True</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token comment"># bool类型的True转成int，输出1</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token comment"># int类型的100转成str，输出&#39;d&#39;</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment"># str类型的&#39;d&#39;转成int，输出100</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>说明</strong>：<code>str</code>类型转<code>int</code>类型时可以通过<code>base</code>参数来指定进制，可以将字符串视为对应进制的整数进行转换。<code>str</code>类型转成<code>bool</code>类型时，只要字符串有内容，不是<code>&#39;&#39;</code>或<code>&quot;&quot;</code>，对应的布尔值都是<code>True</code>。<code>bool</code>类型转<code>int</code>类型时，<code>True</code>会变成<code>1</code>，<code>False</code>会变成<code>0</code>。在 ASCII 字符集和 Unicode 字符集中， 字符<code>&#39;d&#39;</code>对应的编码都是<code>100</code>。</p></blockquote><h3 id="_1-2-运算符" tabindex="-1"><a class="header-anchor" href="#_1-2-运算符"><span>1.2 运算符</span></a></h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>[]</code>、<code>[:]</code></td><td>索引、切片</td></tr><tr><td><code>**</code></td><td>幂</td></tr><tr><td><code>~</code>、<code>+</code>、<code>-</code></td><td>按位取反、正号、负号</td></tr><tr><td><code>*</code>、<code>/</code>、<code>%</code>、<code>//</code></td><td>乘、除、模、整除</td></tr><tr><td><code>+</code>、<code>-</code></td><td>加、减</td></tr><tr><td><code>&gt;&gt;</code>、<code>&lt;&lt;</code></td><td>右移、左移</td></tr><tr><td><code>&amp;</code></td><td>按位与</td></tr><tr><td><code>^</code>、\`</td><td>\`</td></tr><tr><td><code>&lt;=</code>、<code>&lt;</code>、<code>&gt;</code>、<code>&gt;=</code></td><td>小于等于、小于、大于、大于等于</td></tr><tr><td><code>==</code>、<code>!=</code></td><td>等于、不等于</td></tr><tr><td><code>is</code>、<code>is not</code></td><td>身份运算符</td></tr><tr><td><code>in</code>、<code>not in</code></td><td>成员运算符</td></tr><tr><td><code>not</code>、<code>or</code>、<code>and</code></td><td>逻辑运算符</td></tr><tr><td><code>=</code>、<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>、<code>%=</code>、<code>//=</code>、<code>**=</code>、<code>&amp;=</code></td><td>赋值运算符</td></tr></tbody></table><blockquote><p><strong>说明</strong>： 所谓优先级就是在一个运算的表达式中，如果出现了多个运算符，应该先执行什么再执行什么的顺序。编写代码的时候，如果搞不清楚一个表达式中运算符的优先级，可以使用圆括号来确保运算的执行顺序。</p></blockquote><p><code>&amp;=</code> 是按位与赋值运算符，用于对变量进行按位与操作并将结果赋回给变量本身</p><h4 id="_1-2-1-算术运算符" tabindex="-1"><a class="header-anchor" href="#_1-2-1-算术运算符"><span>1.2.1 算术运算符</span></a></h4><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">132</span> <span class="token operator">//</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token comment"># 整除运算，输出13 也就是商取整的意思</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">321</span> <span class="token operator">%</span> <span class="token number">12</span><span class="token punctuation">)</span>     <span class="token comment"># 求模运算，输出9</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment"># 求幂运算，输出4</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-2-赋值运算符" tabindex="-1"><a class="header-anchor" href="#_1-2-2-赋值运算符"><span>1.2.2 赋值运算符</span></a></h4><p>作用是将右边的值赋给左边的变量。赋值运算符还可以跟上面的算术运算符放在一起，组合成复合赋值运算符</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">a <span class="token operator">=</span> <span class="token number">10</span></span>
<span class="line">b <span class="token operator">=</span> <span class="token number">4</span></span>
<span class="line">a <span class="token operator">+=</span> b        <span class="token comment"># 相当于：a = a + b</span></span>
<span class="line">a <span class="token operator">*=</span> a <span class="token operator">+</span> <span class="token number">2</span>    <span class="token comment"># 相当于：a = a * (a + 2)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>      <span class="token comment"># 224</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-3-比较运算符和逻辑运算符" tabindex="-1"><a class="header-anchor" href="#_1-2-3-比较运算符和逻辑运算符"><span>1.2.3 比较运算符和逻辑运算符</span></a></h4><p>比较运算符也称为关系运算符，包括<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&gt;</code>、<code>&lt;=</code>、<code>&gt;=</code>，我相信大家一看就能懂。需要提醒的是比较相等用的是<code>==</code>，请注意这里是两个等号，因为<code>=</code>是赋值运算符，我们在上面刚刚讲到过。比较不相等用的是<code>!=</code>，跟数学课本中使用的$\\small{\\neq}$并不相同，Python 2中曾经使用过<code>&lt;&gt;</code>来表示不等于，在 Python 3中使用<code>&lt;&gt;</code>会引发<code>SyntaxError</code>（语法错误）。比较运算符会产生布尔值，要么是<code>True</code>，要么是<code>False</code>。</p><p><code>and</code>运算符</p><ul><li>连接两个布尔值或者产生布尔值的表达式，如果两边的布尔值都是<code>True</code>，那么运算的结果就是<code>True</code>；</li><li>左右两边的布尔值有一个是<code>False</code>，最终的运算结果就是<code>False</code>。</li><li>如果<code>and</code>运算符左边的布尔值是<code>False</code>，不管右边的布尔值是什么，最终的结果都是<code>False</code>，这时运算符右边的布尔值会被跳过（专业的说法叫短路处理，如果<code>and</code>右边是一个表达式，那么这个表达式不会执行）</li></ul><p><code>or</code>字面意思是“或者”，所以<code>or</code>运算符也会连接两个布尔值或产生布尔值的表达式，如果两边的布尔值有任意一个是<code>True</code>，那么最终的结果就是<code>True</code>。当然，<code>or</code>运算符也是有短路功能的，当它左边的布尔值为<code>True</code>的情况下，右边的布尔值会被短路（如果<code>or</code>右边是一个表达式，那么这个表达式不会执行）。</p><p>not 后面可以跟一个布尔值，如果<code>not</code>后面的布尔值或表达式是<code>True</code>，那么运算的结果就是<code>False</code>；如果<code>not</code>后面的布尔值或表达式是<code>False</code>，那么运算的结果就是<code>True</code></p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">flag0 <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span></span>
<span class="line">flag1 <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">&gt;</span> <span class="token number">2</span></span>
<span class="line">flag2 <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">&lt;</span> <span class="token number">1</span></span>
<span class="line">flag3 <span class="token operator">=</span> flag1 <span class="token keyword">and</span> flag2</span>
<span class="line">flag4 <span class="token operator">=</span> flag1 <span class="token keyword">or</span> flag2</span>
<span class="line">flag5 <span class="token operator">=</span> <span class="token keyword">not</span> flag0</span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;flag0 =&#39;</span><span class="token punctuation">,</span> flag0<span class="token punctuation">)</span>     <span class="token comment"># flag0 = True</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;flag1 =&#39;</span><span class="token punctuation">,</span> flag1<span class="token punctuation">)</span>     <span class="token comment"># flag1 = True</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;flag2 =&#39;</span><span class="token punctuation">,</span> flag2<span class="token punctuation">)</span>     <span class="token comment"># flag2 = False</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;flag3 =&#39;</span><span class="token punctuation">,</span> flag3<span class="token punctuation">)</span>     <span class="token comment"># flag3 = False</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;flag4 =&#39;</span><span class="token punctuation">,</span> flag4<span class="token punctuation">)</span>     <span class="token comment"># flag4 = True</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;flag5 =&#39;</span><span class="token punctuation">,</span> flag5<span class="token punctuation">)</span>     <span class="token comment"># flag5 = False</span></span>
<span class="line"><span class="token comment"># print(flag1 and not flag2)  # True</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token keyword">or</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;wwww&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment"># False 短路运算</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>说明</strong>：比较运算符的优先级高于赋值运算符，所以上面的<code>flag0 = 1 == 1</code>先做<code>1 == 1</code>产生布尔值<code>True</code>，再将这个值赋值给变量<code>flag0</code>。<code>print</code>函数可以输出多个值，多个值之间可以用<code>,</code>进行分隔，输出的内容默认以空格分开。</p><h3 id="运算符和表达式应用举例" tabindex="-1"><a class="header-anchor" href="#运算符和表达式应用举例"><span>运算符和表达式应用举例</span></a></h3><h4 id="例子1-华氏温度转摄氏温度" tabindex="-1"><a class="header-anchor" href="#例子1-华氏温度转摄氏温度"><span>例子1：华氏温度转摄氏温度</span></a></h4><p>要求：输入华氏温度将其转换为摄氏温度，华氏温度到摄氏温度的转换公式为：$\\small{C = (F - 32) / 1.8}$。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">f <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;请输入华氏温度: &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># print(f)</span></span>
<span class="line">c <span class="token operator">=</span> <span class="token punctuation">(</span>f <span class="token operator">-</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1.8</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;%.1f华氏度 = %.1f摄氏度&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>f<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>说明</strong>：上面代码中的<code>input</code>函数用于从键盘接收用户输入，由于输入的都是字符串，如果想处理成浮点小数来做后续的运算，可以用我们上一课讲解的类型转换的方法，用<code>float</code>函数将<code>str</code>类型处理成<code>float</code>类型。</p><p>上面的代码中，我们对<code>print</code>函数输出的内容进行了格式化处理，<code>print</code>输出的字符串中有两个<code>%.1f</code>占位符，这两个占位符会被<code>%</code>之后的<code>(f, c)</code>中的两个<code>float</code>类型的变量值给替换掉，浮点数小数点后保留1位有效数字。如果字符串中有<code>%d</code>占位符，那么我们会用<code>int</code>类型的值替换掉它，如果字符串中有<code>%s</code>占位符，那么它会被<code>str</code>类型的值替换掉。</p><p>除了上面格式化输出的方式外，Python 中还可以用下面的办法来格式化输出，我们给出一个带占位符的字符串，字符串前面的<code>f</code>表示这个字符串是需要格式化处理的，其中的<code>{f:.1f}</code>和<code>{c:.1f}</code>可以先看成是<code>{f}</code>和<code>{c}</code>，表示输出时会用变量<code>f</code>和变量<code>c</code>的值替换掉这两个占位符，后面的<code>:.1f</code>表示这是一个浮点数，小数点后保留1位有效数字。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">f <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;请输入华氏温度: &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># print(f)</span></span>
<span class="line">c <span class="token operator">=</span> <span class="token punctuation">(</span>f <span class="token operator">-</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1.8</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;%.1f华氏度 = %.1f摄氏度&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>f<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>f<span class="token punctuation">:</span><span class="token format-spec">.1f</span><span class="token punctuation">}</span></span><span class="token string">华氏度 = </span><span class="token interpolation"><span class="token punctuation">{</span>c<span class="token punctuation">:</span><span class="token format-spec">.1f</span><span class="token punctuation">}</span></span><span class="token string">摄氏度&#39;</span></span><span class="token punctuation">)</span> <span class="token comment"># {f:.1f} 表示法</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="例子2-计算圆的周长和面积" tabindex="-1"><a class="header-anchor" href="#例子2-计算圆的周长和面积"><span>例子2：计算圆的周长和面积</span></a></h4><p>要求：输入一个圆的半径，计算出它的周长（$\\small{2 \\pi r}$）和面积（$\\small{\\pi r^{2}}$）。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">radius <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;请输入圆的半径: &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">perimeter <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">3.1416</span> <span class="token operator">*</span> radius</span>
<span class="line">area <span class="token operator">=</span> <span class="token number">3.1416</span> <span class="token operator">*</span> radius <span class="token operator">*</span> radius</span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;周长: %.2f&#39;</span> <span class="token operator">%</span> perimeter<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;面积: %.2f&#39;</span> <span class="token operator">%</span> area<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>增加了math</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">import</span> math</span>
<span class="line">radius <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;请输入圆的半径: &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">perimeter <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>pi <span class="token operator">*</span> radius</span>
<span class="line">area <span class="token operator">=</span> math<span class="token punctuation">.</span>pi <span class="token operator">*</span> radius <span class="token operator">*</span> radius</span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;周长: %.2f&#39;</span> <span class="token operator">%</span> perimeter<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;面积: %.2f&#39;</span> <span class="token operator">%</span> area<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里其实还有一种格式化输出的方式，是 Python 3.8 中增加的新特性，大家直接看下面的代码就明白了。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">import</span> math</span>
<span class="line">radius <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;请输入圆的半径: &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">perimeter <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>pi <span class="token operator">*</span> radius</span>
<span class="line">area <span class="token operator">=</span> math<span class="token punctuation">.</span>pi <span class="token operator">*</span> radius <span class="token operator">*</span> radius</span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;周长：</span><span class="token interpolation"><span class="token punctuation">{</span>perimeter <span class="token operator">=</span> <span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;面积：</span><span class="token interpolation"><span class="token punctuation">{</span>area <span class="token operator">=</span> <span class="token punctuation">:</span><span class="token format-spec">.2f</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：假如变量<code>a</code>的值是<code>9.87</code>，那么字符串<code>f&#39;{a = }&#39;</code>的值是<code>a = 9.87</code>；而字符串<code>f&#39;{a = :.1f}&#39;</code>的值是<code>a = 9.9</code>。这种格式化输出的方式会同时输出变量名和变量值。</p><h4 id="例子3-判断闰年" tabindex="-1"><a class="header-anchor" href="#例子3-判断闰年"><span>例子3：判断闰年</span></a></h4><p>要求：输入一个1582年以后的年份，判断该年份是不是闰年。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">year <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;请输入年份: &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">is_leap <span class="token operator">=</span> year <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> year <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token keyword">or</span> year <span class="token operator">%</span> <span class="token number">400</span> <span class="token operator">==</span> <span class="token number">0</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>is_leap <span class="token operator">=</span> <span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>说明</strong>：对于格里历（Gregorian calendar），即今天我们使用的公历，判断闰年的规则是：1. 公元年份非4的倍数是平年；2. 公元年份为4的倍数但非100的倍数是闰年；3. 公元年份为400的倍数是闰年。格里历是由教皇格里高利十三世在1582年10月引入的，作为对儒略历（Julian calendar）的修改和替代，我们在输入年份时要注意这一点。上面的代码通过<code>%</code>来判断<code>year</code>是不是<code>4</code>的倍数、<code>100</code>的倍数、<code>400</code>的倍数，然后用<code>and</code>和<code>or</code>运算符将三个条件组装在一起，前两个条件要同时满足，第三个条件跟前两个条件的组合只需满足其中之一。</p><h3 id="_1-3-分支结构" tabindex="-1"><a class="header-anchor" href="#_1-3-分支结构"><span>1.3 分支结构</span></a></h3><h4 id="_1-3-1-使用if和else构造分支结构" tabindex="-1"><a class="header-anchor" href="#_1-3-1-使用if和else构造分支结构"><span>1.3.1 使用if和else构造分支结构</span></a></h4><p>我们来写一个身体质量指数（BMI）的计算器。身体质量质数也叫体质指数，是国际上常用的衡量人体胖瘦程度以及是否健康的一个标准，计算公式如下所示。通常认为$\\small{18.5 \\le BMI &lt; 24}$是正常范围，$\\small{BMI &lt; 18.5}$说明体重过轻，$\\small{BMI \\ge 24}$说明体重过重，$\\small{BMI \\ge 27}$就属于肥胖的范畴了。</p><p>BMI = 体重 / 身高^2</p><p>如果要给出更为准确的提示信息，我们可以再次修改上面的代码，通过<code>elif</code>关键字为上面的分支结构增加更多的分支，如下所示</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">height <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;请输入你的身高: &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">weight <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;请输入你的体重: &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>weight<span class="token punctuation">,</span> height<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">BMI <span class="token operator">=</span> weight <span class="token operator">/</span> <span class="token punctuation">(</span>height <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;BMI = %.1f&#39;</span> <span class="token operator">%</span> BMI<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># if 18.5 &lt; BMI &lt; 24:</span></span>
<span class="line"><span class="token comment">#     print(&#39;身体正常&#39;)</span></span>
<span class="line"><span class="token comment"># else:</span></span>
<span class="line"><span class="token comment">#     print(&#39;身体不正常&#39;)</span></span>
<span class="line"><span class="token keyword">if</span> BMI <span class="token operator">&lt;</span> <span class="token number">18.5</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;你的体重过轻&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">elif</span> BMI <span class="token operator">&lt;</span> <span class="token number">24</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;你的身材很棒&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">elif</span> BMI <span class="token operator">&lt;</span> <span class="token number">27</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;你的体重过重&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">elif</span> BMI <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;你已轻度肥胖&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">elif</span> BMI <span class="token operator">&lt;</span> <span class="token number">35</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;你已中度肥胖&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;你已重度肥胖&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-3-2-使用math和case构造分支结构" tabindex="-1"><a class="header-anchor" href="#_1-3-2-使用math和case构造分支结构"><span>1.3.2 使用math和case构造分支结构</span></a></h4><p>Python 3.10 中增加了一种新的构造分支结构的方式，通过使用<code>match</code>和<code>case</code> 关键字，我们可以轻松的构造出多分支结构。Python 的官方文档在介绍这个新语法时，举了一个 HTTP 响应状态码识别的例子，非常有意思。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">status_code <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;响应状态码: &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">match</span> status_code<span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">400</span><span class="token punctuation">:</span> description <span class="token operator">=</span> <span class="token string">&#39;Bad Request&#39;</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">401</span><span class="token punctuation">:</span> description <span class="token operator">=</span> <span class="token string">&#39;Unauthorized&#39;</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">403</span><span class="token punctuation">:</span> description <span class="token operator">=</span> <span class="token string">&#39;Forbidden&#39;</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">404</span><span class="token punctuation">:</span> description <span class="token operator">=</span> <span class="token string">&#39;Not Found&#39;</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">405</span><span class="token punctuation">:</span> description <span class="token operator">=</span> <span class="token string">&#39;Method Not Allowed&#39;</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token keyword">_</span><span class="token punctuation">:</span> description <span class="token operator">=</span> <span class="token string">&#39;Unknown Status Code&#39;</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;状态码描述:&#39;</span><span class="token punctuation">,</span> description<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>说明</strong>：带有<code>_</code>的<code>case</code>语句在代码中起到通配符的作用，如果前面的分支都没有匹配上，代码就会来到<code>case _</code>。<code>case _</code>的使用是可选的，并非每种分支结构都要给出通配符选项。如果分支中出现了<code>case _</code>，它只能放在分支结构的最后面，如果它的后面还有其他的分支，那么这些分支将是不可达的。</p><p><code>match-case</code>语法还有很多高级玩法，我们等用到时候再为大家讲解，有一个合并模式可以在这里分享给大家</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">status_code <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;请输入您的状态码&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">match</span> status_code<span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">404</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Bad Request&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">401</span> <span class="token operator">|</span> <span class="token number">402</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Payment Required&#39;</span> <span class="token operator">+</span> <span class="token string">&#39;Unauthorized&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token keyword">_</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;other&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4-循环结构" tabindex="-1"><a class="header-anchor" href="#_1-4-循环结构"><span>1.4 循环结构</span></a></h3><h4 id="for-in循环" tabindex="-1"><a class="header-anchor" href="#for-in循环"><span>for-in循环</span></a></h4><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">import</span> time</span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;hello, world&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要说明的是，上面代码中的<code>range(3600)</code>可以构造出一个从<code>0</code>到<code>3599</code>的范围，当我们把这样一个范围放到<code>for-in</code>循环中，就可以通过前面的循环变量<code>i</code>依次取出从<code>0</code>到<code>3599</code>的整数，这就让<code>for-in</code>代码块中的语句可以重复3600次。当然，<code>range</code>的用法非常灵活，下面的清单给出了使用<code>range</code>函数的例子：</p><ul><li><code>range(101)</code>：可以用来产生<code>0</code>到<code>100</code>范围的整数，需要注意的是取不到<code>101</code>。</li><li><code>range(1, 101)</code>：可以用来产生<code>1</code>到<code>100</code>范围的整数，相当于是左闭右开的设定，即<code>[1, 101)</code>。</li><li><code>range(1, 101, 2)</code>：可以用来产生<code>1</code>到<code>100</code>的奇数，其中<code>2</code>是步长（跨度），即每次递增的值，<code>101</code>取不到。</li><li><code>range(100, 0, -2)</code>：可以用来产生<code>100</code>到<code>1</code>的偶数，其中<code>-2</code>是步长（跨度），即每次递减的值，<code>0</code>取不到。</li></ul><p>大家可能已经注意到了，上面的输出和休眠操作都没有用到循环变量<code>i</code>，对于不需要用到循环变量的<code>for-in</code>循环结构，按照 Python 的编程惯例，我们通常把循环变量命名为<code>_</code>，修改后的代码如下所示。虽然结果没什么变化，但是这样写显得你更专业。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">import</span> time</span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;hello, world&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="while循环" tabindex="-1"><a class="header-anchor" href="#while循环"><span>while循环</span></a></h4><p>如果要构造循环结构但是又不能确定循环重复的次数，我们推荐使用<code>while</code>循环。<code>while</code>循环通过布尔值或能产生布尔值的表达式来控制循环，当布尔值或表达式的值为<code>True</code>时，循环体（<code>while</code>语句下方保持相同缩进的代码块）中的语句就会被重复执行，当表达式的值为<code>False</code>时，结束循环。</p><p>下面我们用<code>while</code>循环来实现从1到100的整数求和，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">total <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">i <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">:</span></span>
<span class="line">    total <span class="token operator">+=</span> i</span>
<span class="line">    i <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="break和continue" tabindex="-1"><a class="header-anchor" href="#break和continue"><span>break和continue</span></a></h4><p>我们再来看一个极端的场景，把<code>while</code>循环的条件直接设置为布尔值<code>True</code>，还是从1到100的偶数求和。</p><p>那我们就可以使用break语句</p><p>需要注意的是，<code>break</code>只能终止它所在的那个循环，这一点在使用嵌套循环结构时需要引起注意，后面我们会讲到什么是嵌套的循环结构</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">total <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">i <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span></span>
<span class="line">    i <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line">    <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span></span>
<span class="line">        total <span class="token operator">+=</span> i</span>
<span class="line">    <span class="token keyword">if</span> i <span class="token operator">&gt;</span> <span class="token number">100</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">break</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了<code>break</code>之外，还有另一个在循环结构中可以使用的关键字<code>continue</code>，它可以用来放弃本次循环后续的代码直接让循环进入下一轮</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">total <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;000&#39;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">continue</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;111&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    total <span class="token operator">+=</span> i</span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>说明</strong>：上面的代码使用<code>continue</code>关键字跳过了<code>i</code>是奇数的情况，只有在<code>i</code>是偶数的前提下，才会执行到<code>total += i</code>。</p><h4 id="嵌套的循环结构" tabindex="-1"><a class="header-anchor" href="#嵌套的循环结构"><span>嵌套的循环结构</span></a></h4><p>和分支结构一样，循环结构也是可以嵌套的，也就是说在循环结构中还可以构造循环结构。下面的例子演示了如何通过嵌套的循环来输出一个乘法口诀表（九九表)</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;%.f * %.f = %.f&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span> j<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token operator">*</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&quot;\\t&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>for-in</code>循环的循环体中又用到了<code>for-in</code>循环，外面的循环用来控制产生<code>i</code>行的输出，而里面的循环则用来控制在一行中输出<code>j</code>列。显然，里面的<code>for-in</code>循环的输出就是乘法口诀表中的一整行。所以在里面的循环完成时，我们用了一个<code>print()</code>来实现换行的效果，最后的输出如下所示。</p><p>1 * 1 = 1 1 * 2 = 2 2 * 2 = 4 1 * 3 = 3 2 * 3 = 6 3 * 3 = 9 1 * 4 = 4 2 * 4 = 8 3 * 4 = 12 4 * 4 = 16 1 * 5 = 5 2 * 5 = 10 3 * 5 = 15 4 * 5 = 20 5 * 5 = 25 1 * 6 = 6 2 * 6 = 12 3 * 6 = 18 4 * 6 = 24 5 * 6 = 30 6 * 6 = 36 1 * 7 = 7 2 * 7 = 14 3 * 7 = 21 4 * 7 = 28 5 * 7 = 35 6 * 7 = 42 7 * 7 = 49 1 * 8 = 8 2 * 8 = 16 3 * 8 = 24 4 * 8 = 32 5 * 8 = 40 6 * 8 = 48 7 * 8 = 56 8 * 8 = 64 1 * 9 = 9 2 * 9 = 18 3 * 9 = 27 4 * 9 = 36 5 * 9 = 45 6 * 9 = 54 7 * 9 = 63 8 * 9 = 72 9 * 9 = 81</p><h4 id="结尾-案例-craps赌博游戏" tabindex="-1"><a class="header-anchor" href="#结尾-案例-craps赌博游戏"><span>结尾 案例 CRAPS赌博游戏</span></a></h4><p><strong>说明</strong>：CRAPS又称花旗骰，是美国拉斯维加斯非常受欢迎的一种的桌上赌博游戏。该游戏使用两粒骰子，玩家通过摇两粒骰子获得点数进行游戏。简化后的规则是：玩家第一次摇骰子如果摇出了<code>7</code>点或<code>11</code>点，玩家胜；玩家第一次如果摇出<code>2</code>点、<code>3</code>点或<code>12</code>点，庄家胜；玩家如果摇出其他点数则游戏继续，玩家重新摇骰子，如果玩家摇出了<code>7</code>点，庄家胜；如果玩家摇出了第一次摇的点数，玩家胜；其他点数玩家继续摇骰子，直到分出胜负。为了增加代码的趣味性，我们设定游戏开始时玩家有<code>1000</code>元的赌注，每局游戏开始之前，玩家先下注，如果玩家获胜就可以获得对应下注金额的奖励，如果庄家获胜，玩家就会输掉自己下注的金额。游戏结束的条件是玩家破产（输光所有的赌注）。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">import</span> random</span>
<span class="line">total <span class="token operator">=</span> <span class="token number">1000</span></span>
<span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span>total <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;你的总资产为: </span><span class="token interpolation"><span class="token punctuation">{</span>total<span class="token punctuation">}</span></span><span class="token string">元&#39;</span></span><span class="token punctuation">)</span></span>
<span class="line">    debltValue <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;请输入你下注的金额：&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment"># print() 玩家第一次摇筛</span></span>
<span class="line">    first_point <span class="token operator">=</span> random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">+</span> random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;\\n玩家摇出了</span><span class="token interpolation"><span class="token punctuation">{</span>first_point<span class="token punctuation">}</span></span><span class="token string">点&#39;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">if</span> first_point <span class="token operator">==</span> <span class="token number">7</span> <span class="token keyword">or</span> first_point <span class="token operator">==</span> <span class="token number">11</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;玩家胜!\\n&#39;</span><span class="token punctuation">)</span></span>
<span class="line">            total <span class="token operator">+=</span> debltValue</span>
<span class="line">            <span class="token keyword">break</span></span>
<span class="line">        <span class="token keyword">elif</span> first_point <span class="token operator">==</span> <span class="token number">2</span> <span class="token keyword">or</span> first_point <span class="token operator">==</span> <span class="token number">3</span> <span class="token keyword">or</span> first_point <span class="token operator">==</span> <span class="token number">12</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;庄家胜!\\n&#39;</span><span class="token punctuation">)</span></span>
<span class="line">            total <span class="token operator">-=</span> debltValue</span>
<span class="line">            <span class="token keyword">break</span></span>
<span class="line">        <span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">            second_point <span class="token operator">=</span> random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">+</span> random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span>  <span class="token comment"># 继续玩法</span></span>
<span class="line">            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;玩家摇出了</span><span class="token interpolation"><span class="token punctuation">{</span>second_point<span class="token punctuation">}</span></span><span class="token string">点&#39;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">if</span> second_point <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">:</span></span>
<span class="line">                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;庄家胜!\\n&#39;</span><span class="token punctuation">)</span></span>
<span class="line">                total <span class="token operator">-=</span> debltValue</span>
<span class="line">                <span class="token keyword">break</span></span>
<span class="line">            <span class="token keyword">elif</span> second_point <span class="token operator">==</span> first_point<span class="token punctuation">:</span></span>
<span class="line">                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;玩家胜!\\n&#39;</span><span class="token punctuation">)</span></span>
<span class="line">                total <span class="token operator">+=</span> debltValue</span>
<span class="line">                <span class="token keyword">break</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;玩家破产&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-5-常用数据结构之列表-1" tabindex="-1"><a class="header-anchor" href="#_1-5-常用数据结构之列表-1"><span>1.5 常用数据结构之列表-1</span></a></h3><h5 id="创建列表" tabindex="-1"><a class="header-anchor" href="#创建列表"><span>创建列表</span></a></h5><p>在 Python 中，<strong>列表是由一系元素按特定顺序构成的数据序列</strong>，这就意味着如果我们定义一个列表类型的变量，<strong>可以用它来保存多个数据</strong>。在 python 中，可以使用<code>[]</code>字面量语法来定义列表，列表中的多个元素用逗号进行分隔</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">items1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">68</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">]</span></span>
<span class="line">items2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Python&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Java&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Go&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Kotlin&#39;</span><span class="token punctuation">]</span></span>
<span class="line">items3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">12.3</span><span class="token punctuation">,</span> <span class="token string">&#39;Python&#39;</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>items1<span class="token punctuation">)</span>  <span class="token comment"># [35, 12, 99, 68, 55, 35, 87]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>items2<span class="token punctuation">)</span>  <span class="token comment"># [&#39;Python&#39;, &#39;Java&#39;, &#39;Go&#39;, &#39;Kotlin&#39;]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>items3<span class="token punctuation">)</span>  <span class="token comment"># [100, 12.3, &#39;Python&#39;, True]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>说明</strong>：列表中可以有重复元素，例如<code>items1</code>中的<code>35</code>；列表中可以有不同类型的元素，例如<code>items3</code>中有<code>int</code>类型、<code>float</code>类型、<code>str</code>类型和<code>bool</code>类型的元素，但是我们通常并不建议将不同类型的元素放在同一个列表中，主要是操作起来极为不方便。</p></blockquote><p>除此以外，还可以通过 Python 内置的<code>list</code>函数将其他序列变成列表。准确的说，<code>list</code>并不是一个普通的函数，它是创建列表对象的构造器，</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token comment"># 列表</span></span>
<span class="line">items1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">68</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">]</span></span>
<span class="line">items2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Python&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Java&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Go&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Kotlin&#39;</span><span class="token punctuation">]</span></span>
<span class="line">items3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">12.3</span><span class="token punctuation">,</span> <span class="token string">&#39;Python&#39;</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>items1<span class="token punctuation">)</span><span class="token punctuation">)</span> </span>
<span class="line"></span>
<span class="line">items4 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">items5 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>items4<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">// &lt;class &#39;list&#39;&gt;</span></span>
<span class="line"><span class="token comment">// &lt;class &#39;list&#39;&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>说明</strong>：<code>range(1, 10)</code>会产生<code>1</code>到<code>9</code>的整数序列，给到<code>list</code>构造器中，会创建出由<code>1</code>到<code>9</code>的整数构成的列表。字符串是字符构成的序列，上面的<code>list(&#39;hello&#39;)</code>用字符串<code>hello</code>的字符作为列表元素，创建了列表对象。</p></blockquote><h5 id="列表的运算" tabindex="-1"><a class="header-anchor" href="#列表的运算"><span>列表的运算</span></a></h5><p>我们可以使用<code>+</code>运算符实现两个列表的拼接，拼接运算会将两个列表中的元素连接起来放到一个列表中，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">items5 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">]</span></span>
<span class="line">items6 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">]</span></span>
<span class="line">items7 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Python&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Java&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;JavaScript&#39;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>items5 <span class="token operator">+</span> items6<span class="token punctuation">)</span>  <span class="token comment"># [35, 12, 99, 45, 66, 45, 58, 29]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>items6 <span class="token operator">+</span> items7<span class="token punctuation">)</span>  <span class="token comment"># [45, 58, 29, &#39;Python&#39;, &#39;Java&#39;, &#39;JavaScript&#39;]</span></span>
<span class="line">items5 <span class="token operator">+=</span> items6</span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>items5<span class="token punctuation">)</span>  <span class="token comment"># [35, 12, 99, 45, 66, 45, 58, 29]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以使用<code>*</code>运算符实现列表的重复运算，<code>*</code>运算符会将列表元素重复指定的次数，我们在上面的代码中增加两行，如下所示。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>items6 <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment"># [45, 58, 29, 45, 58, 29, 45, 58, 29]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>items7 <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># [&#39;Python&#39;, &#39;Java&#39;, &#39;JavaScript&#39;, &#39;Python&#39;, &#39;Java&#39;, &#39;JavaScript&#39;]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以使用<code>in</code>或<code>not in</code>运算符判断一个元素在不在列表中</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">29</span> <span class="token keyword">in</span> items6<span class="token punctuation">)</span>  <span class="token comment"># True</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">99</span> <span class="token keyword">in</span> items6<span class="token punctuation">)</span>  <span class="token comment"># False</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;C++&#39;</span> <span class="token keyword">not</span> <span class="token keyword">in</span> items7<span class="token punctuation">)</span>     <span class="token comment"># True</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Python&#39;</span> <span class="token keyword">not</span> <span class="token keyword">in</span> items7<span class="token punctuation">)</span>  <span class="token comment"># False</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<code>[]</code>运算符，通过在<code>[]</code>中指定元素的位置来访问该元素，这种运算称为索引运算。需要说明的是，<code>[]</code>的元素位置可以是<code>0</code>到<code>N - 1</code>的整数，也可以是<code>-1</code>到<code>-N</code>的整数，分别称为正向索引和反向索引，其中<code>N</code>代表列表元素的个数。对于正向索引，<code>[0]</code>可以访问列表中的第一个元素，<code>[N - 1]</code>可以访问最后一个元素；对于反向索引，<code>[-1]</code>可以访问列表中的最后一个元素，<code>[-N]</code>可以访问第一个元素</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">items8 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;apple&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;waxberry&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pitaya&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;peach&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;watermelon&#39;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>items8<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment"># apple</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>items8<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment"># pitaya</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>items8<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment"># watermelon</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>items8<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># &#39;apple&#39;</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>items8<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># &#39;waxberry&#39;</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>items8<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># watermelon</span></span>
<span class="line">items8<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;strawberry&#39;</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>items8<span class="token punctuation">)</span>      <span class="token comment"># [&#39;apple&#39;, &#39;strawberry&#39;, &#39;durian&#39;, &#39;peach&#39;, &#39;watermelon&#39;]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在使用索引运算的时候要避免出现索引越界的情况，对于上面的<code>items8</code>，如果我们访问<code>items8[5]</code>或<code>items8[-6]</code>，就会引发<code>IndexError</code>错误，导致程序崩溃，对应的错误信息是：<em>list index out of range</em>，翻译成中文就是“数组索引超出范围”。因为对于只有五个元素的列表<code>items8</code>，有效的正向索引是<code>0</code>到<code>4</code>，有效的反向索引是<code>-1</code>到<code>-5</code>。</p><p>如果希望一次性访问列表中的多个元素，我们可以使用切片运算。切片运算是形如<code>[start:end:stride]</code>的运算符，其中<code>start</code>代表访问列表元素的起始位置，<code>end</code>代表访问列表元素的终止位置（终止位置的元素无法访问），而<code>stride</code>则代表了跨度</p><p><strong>核心</strong>：比如我们访问的第一个元素在<code>start</code>位置，那么第二个元素就在<code>start + stride</code>位置，当然<code>start + stride</code>要小于<code>end</code>。</p><p>如果<code>start</code>值等于<code>0</code>，那么在使用切片运算符时可以将其省略；如果<code>end</code>值等于<code>N</code>，<code>N</code>代表列表元素的个数，那么在使用切片运算符时可以将其省略；如果<code>stride</code>值等于<code>1</code>，那么在使用切片运算符时也可以将其省略。所以，下面的代码跟上面的代码作用完全相同。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>items8<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token comment"># [&#39;strawberry&#39;, &#39;durian&#39;]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>items8<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># [&#39;apple&#39;, &#39;strawberry&#39;, &#39;durian&#39;]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>items8<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token comment"># [&#39;apple&#39;, &#39;durian&#39;, &#39;watermelon&#39;]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>items8<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment"># [&#39;strawberry&#39;, &#39;durian&#39;]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>items8<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># [&#39;peach&#39;, &#39;durian&#39;, &#39;strawberry&#39;, &#39;apple&#39;]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>事实上，我们还可以通过切片操作修改列表中的元素，例如我们给上面的代码再加上一行，大家可以看看这里的输出</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">items7 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Python&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Java&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;JavaScript&#39;</span><span class="token punctuation">]</span></span>
<span class="line">items7<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;o&#39;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>items7<span class="token punctuation">)</span> <span class="token comment"># [&#39;Python&#39;, &#39;x&#39;, &#39;o&#39;]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两个列表还可以做关系运算，我们可以比较两个列表是否相等，也可以给两个列表比大小，代码如下所示</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">nums1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span></span>
<span class="line">nums2 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">nums3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>nums1 <span class="token operator">==</span> nums2<span class="token punctuation">)</span>  <span class="token comment"># True</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>nums1 <span class="token operator">!=</span> nums2<span class="token punctuation">)</span>  <span class="token comment"># False</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>nums1 <span class="token operator">&lt;=</span> nums3<span class="token punctuation">)</span>  <span class="token comment"># True</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>nums2 <span class="token operator">&gt;=</span> nums3<span class="token punctuation">)</span>  <span class="token comment"># False</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>说明</strong>：上面的<code>nums1</code>和<code>nums2</code>对应元素完全相同，所以<code>==</code>运算的结果是<code>True</code>。<code>nums2</code>和<code>nums3</code>的比较，由于<code>nums2</code>的第一个元素<code>1</code>小于<code>nums3</code>的第一个元素<code>3</code>，所以<code>nums2 &gt;= nums3</code>比较的结果是<code>False</code>。两个列表的关系运算在实际工作并不那么常用，如果实在不理解就下面放放吧，不用纠结。</p></blockquote><h5 id="元素的遍历" tabindex="-1"><a class="header-anchor" href="#元素的遍历"><span>元素的遍历</span></a></h5><p>方法一：在循环结构中通过索引运算，遍历列表元素</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">languages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Python&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Java&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C++&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Kotlin&#39;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>languages<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>languages<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">Python</span>
<span class="line">Java</span>
<span class="line">C++</span>
<span class="line">Kotlin</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法二：直接对列表做循环，循环变量就是列表元素的代表。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">languages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Python&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Java&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C++&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Kotlin&#39;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">for</span> language <span class="token keyword">in</span> languages<span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>language<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">Python</span>
<span class="line">Java</span>
<span class="line">C++</span>
<span class="line">Kotlin</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-6-常用数据结构之列表-2" tabindex="-1"><a class="header-anchor" href="#_1-6-常用数据结构之列表-2"><span>1.6 常用数据结构之列表-2</span></a></h3><h4 id="列表的方法" tabindex="-1"><a class="header-anchor" href="#列表的方法"><span>列表的方法</span></a></h4><h5 id="添加和删除元素" tabindex="-1"><a class="header-anchor" href="#添加和删除元素"><span>添加和删除元素</span></a></h5><p>列表是一种可变容器，可变容器指的是我们可以向容器中添加元素、可以从容器移除元素，也可以修改现有容器中的元素。我们可以使用列表的<code>append</code>方法向列表中追加元素，使用<code>insert</code>方法向列表中插入元素。追加指的是将元素添加到列表的末尾，而插入则是在指定的位置添加新元素，大家可以看看下面的代码。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">languages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Python&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Java&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C++&#39;</span><span class="token punctuation">]</span></span>
<span class="line">languages<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&#39;JavaScript&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>languages<span class="token punctuation">)</span>  <span class="token comment"># [&#39;Python&#39;, &#39;Java&#39;, &#39;C++&#39;, &#39;JavaScript&#39;]</span></span>
<span class="line">languages<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;SQL&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>languages<span class="token punctuation">)</span>  <span class="token comment"># [&#39;Python&#39;, &#39;SQL&#39;, &#39;Java&#39;, &#39;C++&#39;, &#39;JavaScript&#39;]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以用列表的<code>remove</code>方法从列表中删除指定元素，需要注意的是，如果要删除的元素并不在列表中，会引发<code>ValueError</code>错误导致程序崩溃，所以建议大家在删除元素时，先用之前讲过的成员运算做一个判断。我们还可以使用<code>pop</code>方法从列表中删除元素，<code>pop</code>方法默认删除列表中的最后一个元素，当然也可以给一个位置，删除指定位置的元素。在使用<code>pop</code>方法删除元素时，如果索引的值超出了范围，会引发<code>IndexError</code>异常，导致程序崩溃。除此之外，列表还有一个<code>clear</code>方法，可以清空列表中的元素，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">languages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Python&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;SQL&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Java&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C++&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;JavaScript&#39;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token string">&#39;Java&#39;</span> <span class="token keyword">in</span> languages<span class="token punctuation">:</span></span>
<span class="line">    languages<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">&#39;Java&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token string">&#39;Swift&#39;</span> <span class="token keyword">in</span> languages<span class="token punctuation">:</span></span>
<span class="line">    languages<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">&#39;Swift&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>languages<span class="token punctuation">)</span>  <span class="token comment"># [&#39;Python&#39;, &#39;SQL&#39;, C++&#39;, &#39;JavaScript&#39;]</span></span>
<span class="line">languages<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">temp <span class="token operator">=</span> languages<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span>       <span class="token comment"># SQL</span></span>
<span class="line">languages<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>languages<span class="token punctuation">)</span>  <span class="token comment"># [&#39;Python&#39;, C++&#39;, &#39;SQL&#39;]</span></span>
<span class="line">languages<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>languages<span class="token punctuation">)</span>  <span class="token comment"># []</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意： languages<code>列表中有多个</code>&#39;Python&#39;<code>，那么我们用</code>languages.remove(&#39;Python&#39;)<code>是</code>删除第一个\`&#39;Python&#39;</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">languages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Python&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;SQL&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Java&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C++&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;JavaScript&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Python&#39;</span><span class="token punctuation">]</span></span>
<span class="line">languages<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">&#39;Python&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># [&#39;SQL&#39;, &#39;Java&#39;, &#39;C++&#39;, &#39;JavaScript&#39;, &#39;Python&#39;]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="元素位置和频次" tabindex="-1"><a class="header-anchor" href="#元素位置和频次"><span>元素位置和频次</span></a></h5><p>列表的<code>index</code>方法可以查找某个元素在列表中的索引位置，如果找不到指定的元素，<code>index</code>方法会引发<code>ValueError</code>错误；列表的<code>count</code>方法可以统计一个元素在列表中出现的次数，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Python&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Java&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Java&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C++&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Kotlin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Python&#39;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>items<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">&#39;Python&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment"># 0</span></span>
<span class="line"><span class="token comment"># 从索引位置1开始查找&#39;Python&#39;</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>items<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">&#39;Python&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 5</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>items<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">&#39;Python&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment"># 2</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>items<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">&#39;Kotlin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment"># 1</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>items<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">&#39;Swfit&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment"># 0</span></span>
<span class="line"><span class="token comment"># 从索引位置3开始查找&#39;Java&#39;</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>items<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">&#39;Java&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># ValueError: &#39;Java&#39; is not in list</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="元素排序和反转" tabindex="-1"><a class="header-anchor" href="#元素排序和反转"><span>元素排序和反转</span></a></h5><p>列表的<code>sort</code>操作可以实现列表元素的排序，而<code>reverse</code>操作可以实现元素的反转，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Python&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Java&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C++&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Kotlin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Swift&#39;</span><span class="token punctuation">]</span></span>
<span class="line">itemsnum <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;5&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;4&#39;</span><span class="token punctuation">]</span></span>
<span class="line">items<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">itemsnum<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>itemsnum<span class="token punctuation">)</span> <span class="token comment"># [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span>  <span class="token comment"># [&#39;C++&#39;, &#39;Java&#39;, &#39;Kotlin&#39;, &#39;Python&#39;, &#39;Swift&#39;]</span></span>
<span class="line">items<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span>  <span class="token comment"># [&#39;Swift&#39;, &#39;Python&#39;, &#39;Kotlin&#39;, &#39;Java&#39;, &#39;C++&#39;]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="列表生成式" tabindex="-1"><a class="header-anchor" href="#列表生成式"><span>列表生成式</span></a></h5><p>在 Python 中，列表还可以通过一种特殊的字面量语法来创建，这种语法叫做生成式。下面，我们通过例子来说明使用列表生成式创建列表到底有什么好处。</p><p>场景一：创建一个取值范围在<code>1</code>到<code>99</code>且能被<code>3</code>或者<code>5</code>整除的数字构成的列表。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">items = []</span>
<span class="line">for i in range(1, 100):</span>
<span class="line">    if i % 3 == 0 or i % 5 == 0:</span>
<span class="line">        items.append(i)</span>
<span class="line">print(items)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用列表生成式做同样的事情，代码如下所示。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">items = [i for i in range(1, 100) if i % 3 == 0 or i % 5 == 0]</span>
<span class="line">print(items)</span>
<span class="line"># 第一个i就是展示的</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>场景二：有一个整数列表<code>nums1</code>，创建一个新的列表<code>nums2</code>，<code>nums2</code>中的元素是<code>nums1</code>中对应元素的平方。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">nums1 = [35, 12, 97, 64, 55]</span>
<span class="line">nums2 = []</span>
<span class="line">for num in nums1:</span>
<span class="line">    nums2.append(num ** 2)</span>
<span class="line">print(nums2)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用列表生成式做同样的事情，代码如下所示。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">nums1 = [35, 12, 97, 64, 55]</span>
<span class="line">nums2 = [num ** 2 for num in nums1]</span>
<span class="line">print(nums2)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>场景三： 有一个整数列表<code>nums1</code>，创建一个新的列表<code>nums2</code>，将<code>nums1</code>中大于<code>50</code>的元素放到<code>nums2</code>中。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">nums1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">]</span></span>
<span class="line">nums2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">for</span> num <span class="token keyword">in</span> nums1<span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">if</span> num <span class="token operator">&gt;</span> <span class="token number">50</span><span class="token punctuation">:</span></span>
<span class="line">        nums2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用列表生成式做同样的事情，代码如下所示。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">nums1 = [35, 12, 97, 64, 55]</span>
<span class="line">nums2 = [num for num in nums1 if num &gt; 50]</span>
<span class="line">print(nums2)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>记住“<strong>强烈建议用生成式语法来创建列表</strong>”这个结论就可以了</p><p>因为使用列表生成式创建列表不仅代码简单优雅，而且性能上也优于使用<code>for-in</code>循环和<code>append</code>方法向空列表中追加元素的方式。为什么说生成式有更好的性能呢，那是因为 Python 解释器的字节码指令中有专门针对生成式的指令（<code>LIST_APPEND</code>指令）；而<code>for</code>循环是通过方法调用（<code>LOAD_METHOD</code>和<code>CALL_METHOD</code>指令）的方式为列表添加元素，方法调用本身就是一个相对比较耗时的操作。对这一点不理解也没有关系，。</p><h5 id="嵌套列表" tabindex="-1"><a class="header-anchor" href="#嵌套列表"><span>嵌套列表</span></a></h5><p>Python 语言没有限定列表中的元素必须是相同的数据类型，也就是说一个列表中的元素可以任意的数据类型，当然也包括列表本身。如果列表中的元素也是列表，那么我们可以称之为嵌套的列表。嵌套的列表可以用来表示表格或数学上的矩阵，例如：我们想保存5个学生3门课程的成绩，可以用如下所示的列表。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">scores = [[95, 83, 92], [80, 75, 82], [92, 97, 90], [80, 78, 69], [65, 66, 89]]</span>
<span class="line">print(scores[0])</span>
<span class="line">print(scores[0][1])</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于上面的嵌套列表，每个元素相当于就是一个学生3门课程的成绩，例如<code>[95, 83, 92]</code>，而这个列表中的<code>83</code>代表了这个学生某一门课的成绩，如果想访问这个值，可以使用两次索引运算<code>scores[0][1]</code>，其中<code>scores[0]</code>可以得到<code>[95, 83, 92]</code>这个列表，再次使用索引运算<code>[1]</code>就可以获得该列表中的第二个元素。</p><p>如果想通过键盘输入的方式来录入5个学生3门课程的成绩并保存在列表中，可以使用如下所示的代码。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">scores <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        score <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;请输入: &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>score<span class="token punctuation">)</span></span>
<span class="line">    scores<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>scores<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想通过产生随机数的方式来生成5个学生3门课程的成绩并保存在列表中，我们可以使用列表生成式，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">import</span> random</span>
<span class="line"></span>
<span class="line">scores <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>scores<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>说明</strong>：上面的代码<code>[random.randrange(60, 101) for _ in range(3)] </code>可以产生由3个随机整数构成的列表，我们把这段代码又放在了另一个列表生成式中作为列表的元素，这样的元素一共生成5个，最终得到了一个嵌套列表。</p></blockquote><h3 id="_1-7-常用数据结构之元组" tabindex="-1"><a class="header-anchor" href="#_1-7-常用数据结构之元组"><span>1.7 常用数据结构之元组</span></a></h3><p>元组也是多个元素按照一定顺序构成的序列。元组和列表的不同之处在于，<strong>元组是不可变类型</strong>，这就意味着元组类型的变量一旦定义，其中的元素不能再添加或删除，而且元素的值也不能修改。如果试图修改元组中的元素，将引发<code>TypeError</code>错误，导致程序崩溃。定义元组通常使用形如<code>(x, y, z)</code>的字面量语法，元组类型支持的运算符跟列表是一样的</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token comment"># 定义一个三元组</span></span>
<span class="line">t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 查看变量的类型</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># &lt;class &#39;tuple&#39;&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token comment"># 定义一个三元组</span></span>
<span class="line">t1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 定义一个四元组</span></span>
<span class="line">t2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;骆昊&#39;</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token string">&#39;四川成都&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 查看变量的类型</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># &lt;class &#39;tuple&#39;&gt;</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># &lt;class &#39;tuple&#39;&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 查看元组中元素的数量</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 3</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 4</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 索引运算</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>t1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># 35</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>t1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># 98</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>t2<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment"># 四川成都</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 切片运算</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>t2<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment"># (&#39;骆昊&#39;, 43)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>t2<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># (&#39;骆昊&#39;, &#39;四川成都&#39;)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 循环遍历元组中的元素</span></span>
<span class="line"><span class="token keyword">for</span> elem <span class="token keyword">in</span> t1<span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 成员运算</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">12</span> <span class="token keyword">in</span> t1<span class="token punctuation">)</span>         <span class="token comment"># True</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">99</span> <span class="token keyword">in</span> t1<span class="token punctuation">)</span>         <span class="token comment"># False</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Hao&#39;</span> <span class="token keyword">not</span> <span class="token keyword">in</span> t2<span class="token punctuation">)</span>  <span class="token comment"># False</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 拼接运算</span></span>
<span class="line">t3 <span class="token operator">=</span> t1 <span class="token operator">+</span> t2</span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>t3<span class="token punctuation">)</span>  <span class="token comment"># (35, 12, 98, &#39;骆昊&#39;, 43, True, &#39;四川成都&#39;)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 比较运算</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>t1 <span class="token operator">==</span> t3<span class="token punctuation">)</span>            <span class="token comment"># False</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>t1 <span class="token operator">&gt;=</span> t3<span class="token punctuation">)</span>            <span class="token comment"># False</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>t1 <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># False</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>个元组中如果有两个元素，我们就称之为二元组；一个元组中如果五个元素，我们就称之为五元组。需要提醒大家注意的是，<code>()</code>表示空元组，但是如果元组中只有一个元素，需要加上一个逗号，否则<code>()</code>就不是代表元组的字面量语法，而是改变运算优先级的圆括号，所以<code>(&#39;hello&#39;, )</code>和<code>(100, )</code>才是一元组，而<code>(&#39;hello&#39;)</code>和<code>(100)</code>只是字符串和整数</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># &lt;class &#39;tuple&#39;&gt;</span></span>
<span class="line">b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># &lt;class &#39;str&#39;&gt;</span></span>
<span class="line">c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># &lt;class &#39;int&#39;&gt;</span></span>
<span class="line">d <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># &lt;class &#39;tuple&#39;&gt;</span></span>
<span class="line">e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># &lt;class &#39;tuple&#39;&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="打包和解包操作" tabindex="-1"><a class="header-anchor" href="#打包和解包操作"><span>打包和解包操作</span></a></h4><p>当我们把多个用逗号分隔的值赋给一个变量时，多个值会打包成一个元组类型；当我们把一个元组赋值给多个变量时，元组会解包成多个值然后分别赋给对应的变量，如下面的代码所示。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token comment"># 打包操作</span></span>
<span class="line">a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># &lt;class &#39;tuple&#39;&gt;</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>        <span class="token comment"># (1, 10, 100)</span></span>
<span class="line"><span class="token comment"># 解包操作</span></span>
<span class="line">i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k <span class="token operator">=</span> a</span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">)</span>  <span class="token comment"># 1 10 100</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在解包时，如果解包出来的元素个数和变量个数不对应，会引发<code>ValueError</code>异常，错误信息为：<code>too many values to unpack</code>（解包的值太多）或<code>not enough values to unpack</code>（解包的值不足）。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1000</span></span>
<span class="line"><span class="token comment"># i, j, k = a             # ValueError: too many values to unpack (expected 3)</span></span>
<span class="line"><span class="token comment"># i, j, k, l, m, n = a    # ValueError: not enough values to unpack (expected 6, got 4)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有一种解决变量个数少于元素的个数方法，就是使用星号表达式。通过星号表达式，我们可以让一个变量接收多个值，代码如下所示。需要注意两点：首先，用星号表达式修饰的变量会变成一个列表，列表中有0个或多个元素；其次，在解包语法中，星号表达式只能出现一次。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1000</span></span>
<span class="line">i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token operator">*</span>k <span class="token operator">=</span> a</span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">)</span>        <span class="token comment"># 1 10 [100, 1000]</span></span>
<span class="line">i<span class="token punctuation">,</span> <span class="token operator">*</span>j<span class="token punctuation">,</span> k <span class="token operator">=</span> a</span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">)</span>        <span class="token comment"># 1 [10, 100] 1000</span></span>
<span class="line"><span class="token operator">*</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k <span class="token operator">=</span> a</span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">)</span>        <span class="token comment"># [1, 10] 100 1000</span></span>
<span class="line"><span class="token operator">*</span>i<span class="token punctuation">,</span> j <span class="token operator">=</span> a</span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>           <span class="token comment"># [1, 10, 100] 1000</span></span>
<span class="line">i<span class="token punctuation">,</span> <span class="token operator">*</span>j <span class="token operator">=</span> a</span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>           <span class="token comment"># 1 [10, 100, 1000]</span></span>
<span class="line">i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">,</span> <span class="token operator">*</span>l <span class="token operator">=</span> a</span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">,</span> l<span class="token punctuation">)</span>     <span class="token comment"># 1 10 100 [1000]</span></span>
<span class="line">i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">,</span> l<span class="token punctuation">,</span> <span class="token operator">*</span>m <span class="token operator">=</span> a</span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token punctuation">)</span>  <span class="token comment"># 1 10 100 1000 []</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要说明一点，解包语法对所有的序列都成立，这就意味着我们之前讲的列表、<code>range</code>函数构造的范围序列甚至字符串都可以使用解包语法。大家可以尝试运行下面的代码，看看会出现怎样的结果。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">*</span>c <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token comment"># 1 2 [3, 4, 5, 6, 7, 8, 9]</span></span>
<span class="line">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token comment"># 1 10 100</span></span>
<span class="line">a<span class="token punctuation">,</span> <span class="token operator">*</span>b<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token comment"># h [&#39;e&#39;, &#39;l&#39;, &#39;l&#39;] o</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="交换变量的值" tabindex="-1"><a class="header-anchor" href="#交换变量的值"><span>交换变量的值</span></a></h4><p>交换变量的值是写代码时经常用到的一个操作，但是在很多编程语言中，交换两个变量的值都需要借助一个中间变量才能做到，如果不用中间变量就需要使用比较晦涩的位运算来实现。在 Python 中，交换两个变量<code>a</code>和<code>b</code>的值只需要使用如下所示的代码。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">a, b = b, a</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>同理，如果要将三个变量<code>a</code>、<code>b</code>、<code>c</code>的值互换，即<code>b</code>的值赋给<code>a</code>，<code>c</code>的值赋给<code>b</code>，<code>a</code>的值赋给<code>c</code>，也可以如法炮制。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">a, b, c = b, c, a</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>需要说明的是，上面的操作并没有用到打包和解包语法，Python 的字节码指令中有<code>ROT_TWO</code>和<code>ROT_THREE</code>这样的指令可以直接实现这个操作，效率是非常高的。但是如果有多于三个变量的值要依次互换，这个时候是没有直接可用的字节码指令的，需要通过打包解包的方式来完成变量之间值的交换。</p><h4 id="元组和列表的比较" tabindex="-1"><a class="header-anchor" href="#元组和列表的比较"><span>元组和列表的比较</span></a></h4><p>这里还有一个非常值得探讨的问题，Python 中已经有了列表类型，为什么还需要元组这样的类型呢？这个问题对于初学者来说似乎有点困难，不过没有关系，我们先抛出观点，大家可以一边学习一边慢慢体会。</p><ol><li><p>元组是不可变类型，<strong>不可变类型更适合多线程环境</strong>，因为它降低了并发访问变量的同步化开销。关于这一点，我们会在后面讲解并发编程的时候跟大家一起探讨。</p></li><li><p>元组是不可变类型，通常<strong>不可变类型在创建时间上优于对应的可变类型</strong>。我们可以使用<code>timeit</code>模块的<code>timeit</code>函数来看看创建保存相同元素的元组和列表各自花费的时间，<code>timeit</code>函数的<code>number</code>参数表示代码执行的次数。下面的代码中，我们分别创建了保存<code>1</code>到<code>9</code>的整数的列表和元组，每个操作执行<code>10000000</code>次，统计运行时间。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">import timeit</span>
<span class="line"></span>
<span class="line">print(&#39;%.3f 秒&#39; % timeit.timeit(&#39;[1, 2, 3, 4, 5, 6, 7, 8, 9]&#39;, number=10000000))</span>
<span class="line">print(&#39;%.3f 秒&#39; % timeit.timeit(&#39;(1, 2, 3, 4, 5, 6, 7, 8, 9)&#39;, number=10000000))</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">0.495 秒</span>
<span class="line">0.091 秒</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>当然，Python 中的元组和列表类型是可以相互转换的，我们可以通过下面的代码来完成该操作。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">infos = (&#39;骆昊&#39;, 43, True, &#39;四川成都&#39;)</span>
<span class="line"># 将元组转换成列表</span>
<span class="line">print(list(infos))  # [&#39;骆昊&#39;, 43, True, &#39;四川成都&#39;]</span>
<span class="line"></span>
<span class="line">frts = [&#39;apple&#39;, &#39;banana&#39;, &#39;orange&#39;]</span>
<span class="line"># 将列表转换成元组</span>
<span class="line">print(tuple(frts))  # (&#39;apple&#39;, &#39;banana&#39;, &#39;orange&#39;)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h4><p><strong>列表和元组都是容器型的数据类型</strong>，即一个变量可以保存多个数据，而且它们都是按一定顺序组织元素的有序容器。<strong>列表是可变数据类型</strong>，<strong>元组是不可变数据类型</strong>，所以列表可以添加元素、删除元素、清空元素、排序反转，但这些操作对元组来说是不成立的。列表和元组都可以支持<strong>拼接运算</strong>、<strong>成员运算</strong>、<strong>索引运算</strong>、<strong>切片运算</strong>等操作，后面我们要讲到的字符串类型也支持这些运算，因为字符串就是字符按一定顺序构成的序列，在这一点上三者并没有什么区别。我们<strong>推荐大家使用列表的生成式语法来创建列表</strong>，它不仅好用而且效率很高，是 Python 语言中非常有特色的语法。</p><h3 id="_1-8-字符串" tabindex="-1"><a class="header-anchor" href="#_1-8-字符串"><span>1.8 字符串</span></a></h3><h4 id="字符串的定义" tabindex="-1"><a class="header-anchor" href="#字符串的定义"><span>字符串的定义</span></a></h4><p>所谓<strong>字符串</strong>，就是<strong>由零个或多个字符组成的有限序列</strong>，一般记为： $$ s = a_1a_2 \\cdots a_n ,,,,, (0 \\le n \\le \\infty) $$ 在 Python 程序中，我们把单个或多个字符用单引号或者双引号包围起来，就可以表示一个字符串。字符串中的字符可以是特殊符号、英文字母、中文字符、日文的平假名或片假名、希腊字母、Emoji 字符（如：💩、🐷、🀄️）等。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">s1 = &#39;hello, world!&#39;</span>
<span class="line">s2 = &quot;你好，世界！❤️&quot;</span>
<span class="line">s3 = &#39;&#39;&#39;hello,</span>
<span class="line">wonderful</span>
<span class="line">world!&#39;&#39;&#39;</span>
<span class="line">print(s1)</span>
<span class="line">print(s2)</span>
<span class="line">print(s3)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="转义字符" tabindex="-1"><a class="header-anchor" href="#转义字符"><span>转义字符</span></a></h4><p>我们可以在字符串中使用<code>\\</code>（反斜杠）来表示转义，也就是说<code>\\</code>后面的字符不再是它原来的意义，例如：<code>\\n</code>不是代表字符<code>\\</code>和字符<code>n</code>，而是表示换行；<code>\\t</code>也不是代表字符<code>\\</code>和字符<code>t</code>，而是表示制表符。所以如果字符串本身又包含了<code>&#39;</code>、<code>&quot;</code>、<code>\\</code>这些特殊的字符，必须要通过<code>\\</code>进行转义处理。例如要输出一个带单引号或反斜杠的字符串，需要用如下所示的方法。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">s1 = &#39;\\&#39;hello, world!\\&#39;&#39;</span>
<span class="line">s2 = &#39;\\\\hello, world!\\\\&#39;</span>
<span class="line">print(s1)</span>
<span class="line">print(s2)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="原始字符串" tabindex="-1"><a class="header-anchor" href="#原始字符串"><span>原始字符串</span></a></h4><p>Python 中有一种以<code>r</code>或<code>R</code>开头的字符串，这种字符串被称为原始字符串，意思是字符串中的每个字符都是它本来的含义，没有所谓的转义字符。例如，在字符串<code>&#39;hello\\n&#39;</code>中，<code>\\n</code>表示换行；而在<code>r&#39;hello\\n&#39;</code>中，<code>\\n</code>不再表示换行，就是字符<code>\\</code>和字符<code>n</code>。大家可以运行下面的代码，看看会输出什么。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">s1 = &#39;\\it \\is \\time \\to \\read \\now&#39;</span>
<span class="line">s2 = r&#39;\\it \\is \\time \\to \\read \\now&#39;</span>
<span class="line">print(s1)</span>
<span class="line">print(s2)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>说明</strong>：上面的变量<code>s1</code>中，<code>\\t</code>、<code>\\r</code>和<code>\\n</code>都是转义字符。<code>\\t</code>是制表符（table），<code>\\n</code>是换行符（new line），<code>\\r</code>是回车符（carriage return）相当于让输出回到了行首。对比一下两个<code>print</code>函数的输出，看看到底有什么区别！</p></blockquote><h4 id="字符的特殊表示" tabindex="-1"><a class="header-anchor" href="#字符的特殊表示"><span>字符的特殊表示</span></a></h4><p>Python 中还允许在<code>\\</code>后面还可以跟一个八进制或者十六进制数来表示字符，例如<code>\\141</code>和<code>\\x61</code>都代表小写字母<code>a</code>，前者是八进制的表示法，后者是十六进制的表示法。另外一种表示字符的方式是在<code>\\u</code>后面跟 Unicode 字符编码，例如<code>\\u9a86\\u660a</code>代表的是中文“骆昊”。运行下面的代码，看看输出了什么。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">s1 = &#39;\\141\\142\\143\\x61\\x62\\x63&#39;</span>
<span class="line">s2 = &#39;\\u9a86\\u660a&#39;</span>
<span class="line">print(s1)</span>
<span class="line">print(s2)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="字符串的运算" tabindex="-1"><a class="header-anchor" href="#字符串的运算"><span>字符串的运算</span></a></h4><p>Python 语言为字符串类型提供了非常丰富的运算符，有很多运算符跟列表类型的运算符作用类似。例如，我们可以使用<code>+</code>运算符来实现字符串的拼接，可以使用<code>*</code>运算符来重复一个字符串的内容，可以使用<code>in</code>和<code>not in</code>来判断一个字符串是否包含另外一个字符串，我们也可以用<code>[]</code>和<code>[:]</code>运算符从字符串取出某个字符或某些字符。</p><h4 id="拼接和重复" tabindex="-1"><a class="header-anchor" href="#拼接和重复"><span>拼接和重复</span></a></h4><p>下面的例子演示了使用<code>+</code>和<code>*</code>运算符来实现字符串的拼接和重复操作。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">s1 = &#39;hello&#39; + &#39;, &#39; + &#39;world&#39;</span>
<span class="line">print(s1)    # hello, world</span>
<span class="line">s2 = &#39;!&#39; * 3</span>
<span class="line">print(s2)    # !!!</span>
<span class="line">s1 += s2</span>
<span class="line">print(s1)    # hello, world!!!</span>
<span class="line">s1 *= 2</span>
<span class="line">print(s1)    # hello, world!!!hello, world!!!</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用<code>*</code>实现字符串的重复是非常有意思的一个运算符，在很多编程语言中，要表示一个有10个<code>a</code>的字符串，你只能写成<code>&#39;aaaaaaaaaa&#39;</code>，但是在 Python 中，你可以写成<code>&#39;a&#39; * 10</code>。你可能觉得<code>&#39;aaaaaaaaaa&#39;</code>这种写法也没有什么不方便的，但是请想一想，如果字符<code>a</code>要重复100次或者1000次又会如何呢？</p><h4 id="比较运算" tabindex="-1"><a class="header-anchor" href="#比较运算"><span>比较运算</span></a></h4><p>对于两个字符串类型的变量，可以直接使用比较运算符来判断两个字符串的相等性或比较大小。需要说明的是，因为字符串在计算机内存中也是以二进制形式存在的，那么字符串的大小比较比的是每个字符对应的编码的大小。例如<code>A</code>的编码是<code>65</code>， 而<code>a</code>的编码是<code>97</code>，所以<code>&#39;A&#39; &lt; &#39;a&#39;</code>的结果相当于就是<code>65 &lt; 97</code>的结果，这里很显然是<code>True</code>；而<code>&#39;boy&#39; &lt; &#39;bad&#39;</code>，因为第一个字符都是<code>&#39;b&#39;</code>比不出大小，所以实际比较的是第二个字符的大小，显然<code>&#39;o&#39; &lt; &#39;a&#39;</code>的结果是<code>False</code>，所以<code>&#39;boy&#39; &lt; &#39;bad&#39;</code>的结果是<code>False</code>。如果不清楚两个字符对应的编码到底是多少，可以使用<code>ord</code>函数来获得，之前我们有提到过这个函数。例如<code>ord(&#39;A&#39;)</code>的值是<code>65</code>，而<code>ord(&#39;昊&#39;)</code>的值是<code>26122</code>。下面的代码展示了字符串的比较运算，请大家仔细看看。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">s1 = &#39;a whole new world&#39;</span>
<span class="line">s2 = &#39;hello world&#39;</span>
<span class="line">print(s1 == s2)             # False</span>
<span class="line">print(s1 &lt; s2)              # True</span>
<span class="line">print(s1 == &#39;hello world&#39;)  # False</span>
<span class="line">print(s2 == &#39;hello world&#39;)  # True</span>
<span class="line">print(s2 != &#39;Hello world&#39;)  # True</span>
<span class="line">s3 = &#39;骆昊&#39;</span>
<span class="line">print(ord(&#39;骆&#39;))            # 39558</span>
<span class="line">print(ord(&#39;昊&#39;))            # 26122</span>
<span class="line">s4 = &#39;王大锤&#39;</span>
<span class="line">print(ord(&#39;王&#39;))            # 29579</span>
<span class="line">print(ord(&#39;大&#39;))            # 22823</span>
<span class="line">print(ord(&#39;锤&#39;))            # 38180</span>
<span class="line">print(s3 &gt;= s4)             # True</span>
<span class="line">print(s3 != s4)             # True</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="成员运算" tabindex="-1"><a class="header-anchor" href="#成员运算"><span>成员运算</span></a></h4><p>可以用<code>in</code>和<code>not in</code>判断一个字符串中是否包含另外一个字符或字符串，跟列表类型一样，<code>in</code>和<code>not in</code>称为成员运算符，会产生布尔值<code>True</code>或<code>False</code>，代码如下所示。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">s1 = &#39;hello, world&#39;</span>
<span class="line">s2 = &#39;goodbye, world&#39;</span>
<span class="line">print(&#39;wo&#39; in s1)      # True</span>
<span class="line">print(&#39;wo&#39; not in s2)  # False</span>
<span class="line">print(s2 in s1)        # False</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="获取字符串长度" tabindex="-1"><a class="header-anchor" href="#获取字符串长度"><span>获取字符串长度</span></a></h4><p>获取字符串长度跟获取列表元素个数一样，使用内置函数<code>len</code>，代码如下所示。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">s = &#39;hello, world&#39;</span>
<span class="line">print(len(s))                 # 12</span>
<span class="line">print(len(&#39;goodbye, world&#39;))  # 14</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="索引和切片" tabindex="-1"><a class="header-anchor" href="#索引和切片"><span>索引和切片</span></a></h4><p>字符串的索引和切片操作跟列表几乎区别，因为字符串也是一种有序序列，可以通过正向或反向的整数索引访问其中的元素。但是有一点需要注意，因为<strong>字符串是不可变类型</strong>，所以<strong>不能通过索引运算修改字符串中的字符</strong>。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">s = &#39;abc123456&#39;</span>
<span class="line">n = len(s)</span>
<span class="line">print(s[0], s[-n])    # a a</span>
<span class="line">print(s[n-1], s[-1])  # 6 6</span>
<span class="line">print(s[2], s[-7])    # c c</span>
<span class="line">print(s[5], s[-4])    # 3 3</span>
<span class="line">print(s[2:5])         # c12</span>
<span class="line">print(s[-7:-4])       # c12</span>
<span class="line">print(s[2:])          # c123456</span>
<span class="line">print(s[:2])          # ab</span>
<span class="line">print(s[::2])         # ac246</span>
<span class="line">print(s[::-1])        # 654321cba</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要再次提醒大家注意的是，在进行索引运算时，如果索引越界，会引发<code>IndexError</code>异常，错误提示信息为：<code>string index out of range</code>（字符串索引超出范围）。</p><h4 id="字符的遍历" tabindex="-1"><a class="header-anchor" href="#字符的遍历"><span>字符的遍历</span></a></h4><p>如果希望遍历字符串中的每个字符，可以使用<code>for-in</code>循环，有如下所示的两种方式。</p><p>方式一：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">s <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span></span>
<span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方式二：</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">s <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span></span>
<span class="line"><span class="token keyword">for</span> elem <span class="token keyword">in</span> s<span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="字符串的方法" tabindex="-1"><a class="header-anchor" href="#字符串的方法"><span>字符串的方法</span></a></h4><h5 id="大小写相关操作" tabindex="-1"><a class="header-anchor" href="#大小写相关操作"><span>大小写相关操作</span></a></h5><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">s1 <span class="token operator">=</span> <span class="token string">&#39;hello, world!&#39;</span></span>
<span class="line"><span class="token comment"># 字符串首字母大写</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>capitalize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># Hello, world!</span></span>
<span class="line"><span class="token comment"># 字符串每个单词首字母大写</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment"># Hello, World!</span></span>
<span class="line"><span class="token comment"># 字符串变大写</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment"># HELLO, WORLD!</span></span>
<span class="line">s2 <span class="token operator">=</span> <span class="token string">&#39;GOODBYE&#39;</span></span>
<span class="line"><span class="token comment"># 字符串变小写</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment"># goodbye</span></span>
<span class="line"><span class="token comment"># 检查s1和s2的值</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>               <span class="token comment"># hello, world</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span>               <span class="token comment"># GOODBYE</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>说明</strong>：由于字符串是不可变类型，使用字符串的方法对字符串进行操作会产生新的字符串，但是原来变量的值并没有发生变化。所以上面的代码中，当我们最后检查<code>s1</code>和<code>s2</code>两个变量的值时，<code>s1</code>和<code>s2</code> 的值并没有发生变化。</p></blockquote><h5 id="查找操作" tabindex="-1"><a class="header-anchor" href="#查找操作"><span>查找操作</span></a></h5><p>如果想在一个字符串中从前向后查找有没有另外一个字符串，可以使用字符串的<code>find</code>或<code>index</code>方法。在使用<code>find</code>和<code>index</code>方法时还可以通过方法的参数来指定查找的范围，也就是查找不必从索引为<code>0</code>的位置开始</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">s <span class="token operator">=</span> <span class="token string">&#39;hello, world!&#39;</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&#39;or&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment"># 8</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&#39;or&#39;</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># -1</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&#39;of&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment"># -1</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">&#39;or&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment"># 8</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">&#39;or&#39;</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># ValueError: substring not found</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>说明</strong>：<code>find</code>方法找不到指定的字符串会返回<code>-1</code>，<code>index</code>方法找不到指定的字符串会引发<code>ValueError</code>错误。</p></blockquote><p><code>find</code>和<code>index</code>方法还有逆向查找（从后向前查找）的版本，分别是<code>rfind</code>和<code>rindex</code>，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">s <span class="token operator">=</span> <span class="token string">&#39;hello world!&#39;</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&#39;o&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment"># 4</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>rfind<span class="token punctuation">(</span><span class="token string">&#39;o&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment"># 7</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>rindex<span class="token punctuation">(</span><span class="token string">&#39;o&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment"># 7</span></span>
<span class="line"><span class="token comment"># print(s.rindex(&#39;o&#39;, 8))  # ValueError: substring not found</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="性质判断" tabindex="-1"><a class="header-anchor" href="#性质判断"><span>性质判断</span></a></h5><p>可以通过字符串的<code>startswith</code>、<code>endswith</code>来判断字符串是否以某个字符串开头和结尾；还可以用<code>is</code>开头的方法判断字符串的特征，这些方法都返回布尔值，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">s1 <span class="token operator">=</span> <span class="token string">&#39;hello, world!&#39;</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">&#39;He&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># False</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">&#39;hel&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># True</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">&#39;!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment"># True</span></span>
<span class="line">s2 <span class="token operator">=</span> <span class="token string">&#39;abc123456&#39;</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># False</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># False</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># True</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>说明</strong>：上面的<code>isdigit</code>用来判断字符串是不是完全由数字构成的，<code>isalpha</code>用来判断字符串是不是完全由字母构成的，这里的字母指的是 Unicode 字符但不包含 Emoji 字符，<code>isalnum</code>用来判断字符串是不是由字母和数字构成的</p></blockquote><h5 id="格式化字符串" tabindex="-1"><a class="header-anchor" href="#格式化字符串"><span>格式化字符串</span></a></h5><p>在 Python 中，字符串类型可以通过<code>center</code>、<code>ljust</code>、<code>rjust</code>方法做居中、左对齐和右对齐的处理。如果要在字符串的左侧补零，也可以使用<code>zfill</code>方法。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">s <span class="token operator">=</span> <span class="token string">&#39;hello, world&#39;</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># ****hello, world****</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">#         hello, world</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">&#39;~&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># hello, world~~~~~~~~</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;33&#39;</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment"># 00033</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;-33&#39;</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment"># -0033</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们之前讲过，在用<code>print</code>函数输出字符串时，可以用下面的方式对字符串进行格式化。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">a <span class="token operator">=</span> <span class="token number">321</span></span>
<span class="line">b <span class="token operator">=</span> <span class="token number">123</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;%d * %d = %d&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> a <span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，我们也可以用字符串的<code>format</code>方法来完成字符串的格式，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">a <span class="token operator">=</span> <span class="token number">321</span></span>
<span class="line">b <span class="token operator">=</span> <span class="token number">123</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;{0} * {1} = {2}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> a <span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从 Python 3.6 开始，格式化字符串还有更为简洁的书写方式，就是在字符串前加上<code>f</code>来格式化字符串，在这种以<code>f</code>打头的字符串中，<code>{变量名}</code>是一个占位符，会被变量对应的值将其替换掉，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">a <span class="token operator">=</span> <span class="token number">321</span></span>
<span class="line">b <span class="token operator">=</span> <span class="token number">123</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>a<span class="token punctuation">}</span></span><span class="token string"> * </span><span class="token interpolation"><span class="token punctuation">{</span>b<span class="token punctuation">}</span></span><span class="token string"> = </span><span class="token interpolation"><span class="token punctuation">{</span>a <span class="token operator">*</span> b<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要进一步控制格式化语法中变量值的形式，可以参照下面的表格来进行字符串格式化操作。</p><table><thead><tr><th>变量值</th><th>占位符</th><th>格式化结果</th><th>说明</th></tr></thead><tbody><tr><td><code>3.1415926</code></td><td><code>{:.2f}</code></td><td><code>&#39;3.14&#39;</code></td><td>保留小数点后两位</td></tr><tr><td><code>3.1415926</code></td><td><code>{:+.2f}</code></td><td><code>&#39;+3.14&#39;</code></td><td>带符号保留小数点后两位</td></tr><tr><td><code>-1</code></td><td><code>{:+.2f}</code></td><td><code>&#39;-1.00&#39;</code></td><td>带符号保留小数点后两位</td></tr><tr><td><code>3.1415926</code></td><td><code>{:.0f}</code></td><td><code>&#39;3&#39;</code></td><td>不带小数</td></tr><tr><td><code>123</code></td><td><code>{:0&gt;10d}</code></td><td><code>&#39;0000000123&#39;</code></td><td>左边补<code>0</code>，补够10位</td></tr><tr><td><code>123</code></td><td><code>{:x&lt;10d}</code></td><td><code>&#39;123xxxxxxx&#39;</code></td><td>右边补<code>x</code> ，补够10位</td></tr><tr><td><code>123</code></td><td><code>{:&gt;10d}</code></td><td><code>&#39; 123&#39;</code></td><td>左边补空格，补够10位</td></tr><tr><td><code>123</code></td><td><code>{:&lt;10d}</code></td><td><code>&#39;123 &#39;</code></td><td>右边补空格，补够10位</td></tr><tr><td><code>123456789</code></td><td><code>{:,}</code></td><td><code>&#39;123,456,789&#39;</code></td><td>逗号分隔格式</td></tr><tr><td><code>0.123</code></td><td><code>{:.2%}</code></td><td><code>&#39;12.30%&#39;</code></td><td>百分比格式</td></tr><tr><td><code>123456789</code></td><td><code>{:.2e}</code></td><td><code>&#39;1.23e+08&#39;</code></td><td>科学计数法格式</td></tr></tbody></table><h5 id="修剪操作" tabindex="-1"><a class="header-anchor" href="#修剪操作"><span>修剪操作</span></a></h5><p>字符串的<code>strip</code>方法可以帮我们获得将原字符串修剪掉左右两端指定字符之后的字符串，默认是修剪空格字符。这个方法非常有实用价值，可以用来将用户输入时不小心键入的头尾空格等去掉，<code>strip</code>方法还有<code>lstrip</code>和<code>rstrip</code>两个版本，相信从名字大家已经猜出来这两个方法是做什么用的。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">s1 <span class="token operator">=</span> <span class="token string">&#39;   jackfrued@126.com  &#39;</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment"># jackfrued@126.com</span></span>
<span class="line">s2 <span class="token operator">=</span> <span class="token string">&#39;~你好，世界~&#39;</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token string">&#39;~&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 你好，世界~</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token string">&#39;~&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># ~你好，世界</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="替换操作" tabindex="-1"><a class="header-anchor" href="#替换操作"><span>替换操作</span></a></h5><p>如果希望用新的内容替换字符串中指定的内容，可以使用<code>replace</code>方法，代码如下所示。<code>replace</code>方法的第一个参数是被替换的内容，第二个参数是替换后的内容，还可以通过第三个参数指定替换的次数。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">s <span class="token operator">=</span> <span class="token string">&#39;hello, good world&#39;</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&#39;o&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;@&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment"># hell@, g@@d w@rld</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&#39;o&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;@&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># hell@, good world</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="拆分与合并" tabindex="-1"><a class="header-anchor" href="#拆分与合并"><span>拆分与合并</span></a></h5><p>可以使用字符串的<code>split</code>方法将一个字符串拆分为多个字符串（放在一个列表中），也可以使用字符串的<code>join</code>方法将列表中的多个字符串连接成一个字符串，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">s <span class="token operator">=</span> <span class="token string">&#39;I love you&#39;</span></span>
<span class="line">words <span class="token operator">=</span> s<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span>            <span class="token comment"># [&#39;I&#39;, &#39;love&#39;, &#39;you&#39;]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;~&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># I~love~you</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要说明的是，<code>split</code>方法默认使用空格进行拆分，我们也可以指定其他的字符来拆分字符串，而且还可以指定最大拆分次数来控制拆分的效果，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">s <span class="token operator">=</span> <span class="token string">&#39;I#love#you#so#much&#39;</span></span>
<span class="line">words <span class="token operator">=</span> s<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span>  <span class="token comment"># [&#39;I&#39;, &#39;love&#39;, &#39;you&#39;, &#39;so&#39;, &#39;much&#39;]</span></span>
<span class="line">words <span class="token operator">=</span> s<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;#&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span>  <span class="token comment"># [&#39;I&#39;, &#39;love&#39;, &#39;you#so#much&#39;]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="编码和解码" tabindex="-1"><a class="header-anchor" href="#编码和解码"><span>编码和解码</span></a></h5><p>Python 中除了字符串<code>str</code>类型外，还有一种表示二进制数据的字节串类型（<code>bytes</code>）。所谓字节串，就是<strong>由零个或多个字节组成的有限序列</strong>。通过字符串的<code>encode</code>方法，我们可以按照某种编码方式将字符串编码为字节串，我们也可以使用字节串的<code>decode</code>方法，将字节串解码为字符串，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">a <span class="token operator">=</span> <span class="token string">&#39;张三&#39;</span></span>
<span class="line">b <span class="token operator">=</span> a<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span></span>
<span class="line">c <span class="token operator">=</span> a<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&#39;gbk&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">#  b&#39;\\xe5\\xbc\\xa0\\xe4\\xb8\\x89&#39;</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment"># b&#39;\\xd5\\xc5\\xc8\\xfd&#39;</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 张三</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&#39;gbk&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 张三</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-9-常用数据结构之集合" tabindex="-1"><a class="header-anchor" href="#_1-9-常用数据结构之集合"><span>1. 9 常用数据结构之集合</span></a></h3><p>​ 在学习了列表和元组之后，我们再来学习一种容器型的数据类型，它的名字叫集合（set）。说到集合这个词大家一定不会陌生，在数学课本上就有这个概念。如果我们<strong>把一定范围的、确定的、可以区别的事物当作一个整体来看待</strong>，那么这个整体就是集合，集合中的各个事物称为集合的<strong>元素</strong>。通常，集合需要满足以下特性：</p><ol><li><strong>无序性</strong>：一个集合中，每个元素的地位都是相同的，元素之间是无序的。</li><li><strong>互异性</strong>：一个集合中，任何两个元素都是不相同的，即元素在集合中只能出现一次。</li><li><strong>确定性</strong>：给定一个集合和一个任意元素，该元素要么属这个集合，要么不属于这个集合，二者必居其一，不允许有模棱两可的情况出现。</li></ol><p>Python 程序中的集合跟数学上的集合没有什么本质区别，需要强调的是上面所说的无序性和互异性。无序性说明集合中的元素并不像列中的元素那样存在某种次序，可以通过索引运算就能访问任意元素，<strong>集合并不支持索引运算</strong>。另外，集合的互异性决定了<strong>集合中不能有重复元素</strong>，这一点也是集合区别于列表的地方，我们无法将重复的元素添加到一个集合中。集合类型必然是支持<code>in</code>和<code>not in</code>成员运算的，这样就可以确定一个元素是否属于集合，也就是上面所说的集合的确定性。<strong>集合的成员运算在性能上要优于列表的成员运算</strong>，这是集合的底层存储特性决定的，此处我们暂时不做讨论，大家记住这个结论即可。</p><h4 id="_1-创建集合" tabindex="-1"><a class="header-anchor" href="#_1-创建集合"><span>1 创建集合</span></a></h4><p>创建集合可以使用<code>{}</code>字面量语法， <code>{}</code>中需要至少有一个元素，因为没有元素的<code>{}</code>并不是空集合而是一个空字典</p><p>也可以使用 Python 内置函数<code>set</code>来创建一个集合，准确的说<code>set</code>并不是一个函数，而是创建集合对象的构造器</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">set1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span> <span class="token comment"># {1, 2, 3, 4, 5}</span></span>
<span class="line"></span>
<span class="line">set2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;banana&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pitaya&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;apple&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;apple&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;banana&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;grape&#39;</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>set2<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">set3 <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>set3<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">set4 <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>set4<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">set5 <span class="token operator">=</span> <span class="token punctuation">{</span>num <span class="token keyword">for</span> num <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">if</span> num <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">or</span> num <span class="token operator">%</span> <span class="token number">7</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>set5<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：集合中的元素必须是<code>hashable</code>（可散列的）类型，使用哈希存储的容器都会对元素提出这一要求，通常不可变类型都是<code>hashable</code>类型，如整数（<code>int</code>）、浮点小数（<code>float</code>）、布尔值（<code>bool</code>）、字符串（<code>str</code>）、元组（<code>tuple</code>）等。可变类型都不是<code>hashable</code>类型，因为可变类型无法计算出确定的哈希码，所以它们不能放到集合中;同理，由于集合本身也是可变类型，所以集合也不能作为集合中的元素。我们可以创建出嵌套的列表，但是我们不能创建出嵌套的集合，这一点在使用集合的时候一定要引起注意</p><h4 id="_2-集合的遍历" tabindex="-1"><a class="header-anchor" href="#_2-集合的遍历"><span>2 集合的遍历</span></a></h4><p>我们可以通过<code>len</code>函数来获得集合中有多少个元素，但是我们不能通过索引运算来遍历集合中的元素，因为集合元素并没有特定的顺序。当然，要实现对集合元素的遍历，我们仍然可以使用<code>for-in</code>循环</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">set11 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;Python&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C++&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Java&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Kotlin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Swift&#39;</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> set11<span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-集合的运算" tabindex="-1"><a class="header-anchor" href="#_3-集合的运算"><span>3 集合的运算</span></a></h4><h5 id="_3-1-成员运算" tabindex="-1"><a class="header-anchor" href="#_3-1-成员运算"><span>3.1 成员运算</span></a></h5><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">set1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token keyword">in</span> set1<span class="token punctuation">)</span>      <span class="token comment"># False </span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">15</span> <span class="token keyword">in</span> set1<span class="token punctuation">)</span>      <span class="token comment"># True</span></span>
<span class="line">set2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;Python&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Java&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C++&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Swift&#39;</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Ruby&#39;</span> <span class="token keyword">in</span> set2<span class="token punctuation">)</span>  <span class="token comment"># False</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Java&#39;</span> <span class="token keyword">in</span> set2<span class="token punctuation">)</span>  <span class="token comment"># True</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-2-二元运算" tabindex="-1"><a class="header-anchor" href="#_3-2-二元运算"><span>3.2 二元运算</span></a></h5><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">set1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span></span>
<span class="line">set2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment"># 交集</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>set1 <span class="token operator">&amp;</span> set2<span class="token punctuation">)</span>                      <span class="token comment"># {2, 4, 6}</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">.</span>intersection<span class="token punctuation">(</span>set2<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token comment"># {2, 4, 6}</span></span>
<span class="line"><span class="token comment"># 并集</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>set1 <span class="token operator">|</span> set2<span class="token punctuation">)</span>  <span class="token comment"># {1, 2, 3, 4, 5, 6, 7, 8, 10}</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">.</span>union<span class="token punctuation">(</span>set2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># {1, 2, 3, 4, 5, 6, 7, 8, 10}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 差集 也就是set1 里的元素存在于set2中得去掉 形成新的集合</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>set1 <span class="token operator">-</span> set2<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">.</span>difference<span class="token punctuation">(</span>set2<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 对称差  symmetric_difference() 方法返回两个集合中不重复的元素集合，即会移除两个集合中都存在的元素。</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>set1 <span class="token operator">^</span> set2<span class="token punctuation">)</span>                      <span class="token comment"># {1, 3, 5, 7, 8, 10}</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">.</span>symmetric_difference<span class="token punctuation">(</span>set2<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># {1, 3, 5, 7, 8, 10}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 集合的二元运算还可以跟赋值运算一起构成复合赋值运算</p><p>​ 例如：<code>set1 |= set2</code>相当于<code>set1 = set1 | set2</code></p><p>​ <code>|=</code>作用相同的方法是<code>update</code>；</p><p>​ <code>set1 &amp;= set2</code>相当于<code>set1 = set1 &amp; set2</code>，</p><p>​ <code>&amp;=</code>作用相同的方法是<code>intersection_update</code></p><p>​ 代码如下所示</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">set1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span></span>
<span class="line">set2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">set1 <span class="token operator">|</span><span class="token operator">=</span> set2 <span class="token comment"># set1.update(set2)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span>  <span class="token comment"># {1, 2, 3, 4, 5, 6, 7}</span></span>
<span class="line"></span>
<span class="line">set3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">set1 <span class="token operator">&amp;</span><span class="token operator">=</span> set3 <span class="token comment"># set1.intersection_update(set3)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span>  <span class="token comment"># {3, 6}</span></span>
<span class="line"></span>
<span class="line">set2 <span class="token operator">-=</span> set1 <span class="token comment"># set2.difference_update(set1)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>set2<span class="token punctuation">)</span>  <span class="token comment"># {2, 4}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-3-比较运算" tabindex="-1"><a class="header-anchor" href="#_3-3-比较运算"><span>3.3 比较运算</span></a></h5><p>两个集合可以用<code>==</code>和<code>!=</code>进行相等性判断，如果两个集合中的元素完全相同，那么<code>==</code>比较的结果就是<code>True</code>，否则就是<code>False</code>,如果集合<code>A</code>的任意一个元素都是集合<code>B</code>的元素，那么集合<code>A</code>称为集合<code>B</code>的子集,<code>A</code>是<code>B</code>的子集，反过来也可以称<code>B</code>是<code>A</code>的超集。如果<code>A</code>是<code>B</code>的子集且<code>A</code>不等于<code>B</code>，那么<code>A</code>就是<code>B</code>的真子集。Python 为集合类型提供了判断子集和超集的运算符，其实就是我们非常熟悉的<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>这些运算符</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">set1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span></span>
<span class="line">set2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span></span>
<span class="line">set3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>set1 <span class="token operator">&lt;</span> set2<span class="token punctuation">)</span>   <span class="token comment"># True</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>set1 <span class="token operator">&lt;=</span> set2<span class="token punctuation">)</span>  <span class="token comment"># True</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>set2 <span class="token operator">&lt;</span> set3<span class="token punctuation">)</span>   <span class="token comment"># False</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>set2 <span class="token operator">&lt;=</span> set3<span class="token punctuation">)</span>  <span class="token comment"># True</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>set2 <span class="token operator">&gt;</span> set1<span class="token punctuation">)</span>   <span class="token comment"># True</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>set2 <span class="token operator">==</span> set3<span class="token punctuation">)</span>  <span class="token comment"># True</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">.</span>issubset<span class="token punctuation">(</span>set2<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># True</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>set2<span class="token punctuation">.</span>issuperset<span class="token punctuation">(</span>set1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># True</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>说明</strong>：上面的代码中，<code>set1 &lt; set2</code>判断<code>set1</code>是不是<code>set2</code>的真子集，<code>set1 &lt;= set2</code>判断<code>set1</code>是不是<code>set2</code>的子集，<code>set2 &gt; set1</code>判断<code>set2</code>是不是<code>set1</code>的超集。当然，我们也可以通过<code>set1.issubset(set2)</code>判断<code>set1</code>是不是<code>set2</code>的子集；通过<code>set2.issuperset(set1)</code>判断<code>set2</code>是不是<code>set1</code>的超集。</p></blockquote><h4 id="_4-集合的方法" tabindex="-1"><a class="header-anchor" href="#_4-集合的方法"><span>4 集合的方法</span></a></h4><p>Python 中的集合是可变类型，我们可以通过集合类型的方法向集合添加元素或从集合中删除元素</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">set1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment"># 添加元素</span></span>
<span class="line">set1<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span></span>
<span class="line">set1<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span></span>
<span class="line">set1<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">10099</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 删除元素</span></span>
<span class="line">set1<span class="token punctuation">.</span>discard<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token number">100</span> <span class="token keyword">in</span> set1<span class="token punctuation">:</span></span>
<span class="line">    set1<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span>  <span class="token comment"># {1, 1000, 10000}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 清空元素</span></span>
<span class="line">set1<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">)</span>  <span class="token comment"># set() 为啥不是{} 这是字典</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>说明</strong>：删除集合元素的<code>remove</code>方法在元素不存在时会引发<code>KeyError</code>错误，所以上面的代码中我们先通过成员运算判断元素是否在集合中。集合类型还有一个<code>pop</code>方法可以从集合中随机删除一个元素，该方法在删除元素的同时会获得被删除的元素，而<code>remove</code>和<code>discard</code>方法仅仅是删除元素，不会获得被删除的元素。</p></blockquote><p>集合类型还有一个名为<code>isdisjoint</code>的方法可以判断两个集合有没有相同的元素，如果没有相同元素，该方法返回<code>True</code>，否则该方法返回<code>False</code></p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">set1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;Java&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Python&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C++&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Kotlin&#39;</span><span class="token punctuation">}</span></span>
<span class="line">set2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;Kotlin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Swift&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Java&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Dart&#39;</span><span class="token punctuation">}</span></span>
<span class="line">set3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;HTML&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;CSS&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;JavaScript&#39;</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">.</span>isdisjoint<span class="token punctuation">(</span>set2<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># False</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>set1<span class="token punctuation">.</span>isdisjoint<span class="token punctuation">(</span>set3<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># True</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-不可变集合" tabindex="-1"><a class="header-anchor" href="#_5-不可变集合"><span>5 不可变集合</span></a></h4><p>Python 中还有一种不可变类型的集合，名字叫<code>frozenset</code>。<code>set</code>跟<code>frozenset</code>的区别就如同<code>list</code>跟<code>tuple</code>的区别，<code>frozenset</code>由于是不可变类型，能够计算出哈希码，因此它可以作为<code>set</code>中的元素。除了不能添加和删除元素，<code>frozenset</code>在其他方面跟<code>set</code>是一样的，下面的代码简单的展示了<code>frozenset</code>的用法。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">fset1 <span class="token operator">=</span> <span class="token builtin">frozenset</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">fset2 <span class="token operator">=</span> <span class="token builtin">frozenset</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>fset1<span class="token punctuation">)</span>          <span class="token comment"># frozenset({1, 3, 5, 7})</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>fset2<span class="token punctuation">)</span>          <span class="token comment"># frozenset({1, 2, 3, 4, 5})</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>fset1 <span class="token operator">&amp;</span> fset2<span class="token punctuation">)</span>  <span class="token comment"># frozenset({1, 3, 5})</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>fset1 <span class="token operator">|</span> fset2<span class="token punctuation">)</span>  <span class="token comment"># frozenset({1, 2, 3, 4, 5, 7})</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>fset1 <span class="token operator">-</span> fset2<span class="token punctuation">)</span>  <span class="token comment"># frozenset({7})</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>fset1 <span class="token operator">&lt;</span> fset2<span class="token punctuation">)</span>  <span class="token comment"># False</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>last</p><p>Python 中的<strong>集合类型是一种无序容器</strong>，<strong>不允许有重复运算</strong>，由于底层使用了哈希存储，集合中的元素必须是<code>hashable</code>类型。集合与列表最大的区别在于<strong>集合中的元素没有顺序</strong>、所以<strong>不能够通过索引运算访问元素</strong>、但是集合可以执行交集、并集、差集等二元运算，也可以通过关系运算符检查两个集合是否存在超集、子集等关系。</p><h3 id="_1-10-常用数据结构之字典-dictionary" tabindex="-1"><a class="header-anchor" href="#_1-10-常用数据结构之字典-dictionary"><span>1.10 常用数据结构之字典(dictionary)</span></a></h3><p>例如，我们需要一个变量来保存一个人的多项信息，包括：姓名、年龄、身高、体重、家庭住址、本人手机号、紧急联系人手机号，此时你会发现，我们之前学过的列表、元组和集合类型都不够好使。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">person1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;王大锤&#39;</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">168</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token string">&#39;成都市武侯区科华北路62号1栋101&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;13122334455&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;13800998877&#39;</span><span class="token punctuation">]</span></span>
<span class="line">person2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">&#39;王大锤&#39;</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">168</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token string">&#39;成都市武侯区科华北路62号1栋101&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;13122334455&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;13800998877&#39;</span><span class="token punctuation">)</span></span>
<span class="line">person3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;王大锤&#39;</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">168</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token string">&#39;成都市武侯区科华北路62号1栋101&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;13122334455&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;13800998877&#39;</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-创建和使用字典" tabindex="-1"><a class="header-anchor" href="#_1-创建和使用字典"><span>1 创建和使用字典</span></a></h4><p>Python 中创建字典可以使用<code>{}</code>字面量语法，这一点跟上一节课讲的集合是一样的。但是字典的<code>{}</code>中的元素是以键值对的形式存在的，每个元素由<code>:</code>分隔的两个值构成，<code>:</code>前面是键，<code>:</code>后面是值，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">xinhua <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string">&#39;麓&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;山脚下&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;路&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;道，往来通行的地方；方面，地区：南～货，外～货；种类：他俩是一～人&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;蕗&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;甘草的别名&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;潞&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;潞水，水名，即今山西省的浊漳河；潞江，水名，即云南省的怒江&#39;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>xinhua<span class="token punctuation">)</span></span>
<span class="line">person <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;王大锤&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span> <span class="token number">55</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;height&#39;</span><span class="token punctuation">:</span> <span class="token number">168</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;weight&#39;</span><span class="token punctuation">:</span> <span class="token number">60</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;addr&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;成都市武侯区科华北路62号1栋101&#39;</span><span class="token punctuation">,</span> </span>
<span class="line">    <span class="token string">&#39;tel&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;13122334455&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;emergence contact&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;13800998877&#39;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，如果愿意，我们也可以使用内置函数<code>dict</code>或者是字典的生成式语法来创建字典，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token comment"># dict函数(构造器)中的每一组参数就是字典中的一组键值对</span></span>
<span class="line">person <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&#39;王大锤&#39;</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">55</span><span class="token punctuation">,</span> height<span class="token operator">=</span><span class="token number">168</span><span class="token punctuation">,</span> weight<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">,</span> addr<span class="token operator">=</span><span class="token string">&#39;成都市武侯区科华北路62号1栋101&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>  <span class="token comment"># {&#39;name&#39;: &#39;王大锤&#39;, &#39;age&#39;: 55, &#39;height&#39;: 168, &#39;weight&#39;: 60, &#39;addr&#39;: &#39;成都市武侯区科华北路62号1栋101&#39;}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 可以通过Python内置函数zip压缩两个序列并创建字典</span></span>
<span class="line">items1 <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token string">&#39;ABCDE&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;12345&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>items1<span class="token punctuation">)</span>  <span class="token comment"># {&#39;A&#39;: &#39;1&#39;, &#39;B&#39;: &#39;2&#39;, &#39;C&#39;: &#39;3&#39;, &#39;D&#39;: &#39;4&#39;, &#39;E&#39;: &#39;5&#39;}</span></span>
<span class="line">items2 <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token string">&#39;ABCDE&#39;</span><span class="token punctuation">,</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>items2<span class="token punctuation">)</span>  <span class="token comment"># {&#39;A&#39;: 1, &#39;B&#39;: 2, &#39;C&#39;: 3, &#39;D&#39;: 4, &#39;E&#39;: 5}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 用字典生成式语法创建字典</span></span>
<span class="line">items3 <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> x <span class="token operator">**</span> <span class="token number">3</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>items3<span class="token punctuation">)</span>  <span class="token comment"># {1: 1, 2: 8, 3: 27, 4: 64, 5: 125}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字典遍历</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">person <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&#39;王大锤&#39;</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">55</span><span class="token punctuation">,</span> height<span class="token operator">=</span><span class="token number">168</span><span class="token punctuation">,</span> weight<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">,</span> addr<span class="token operator">=</span><span class="token string">&#39;成都市武侯区科华北路62号1栋101&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">for</span> key <span class="token keyword">in</span> person<span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-字典的运算" tabindex="-1"><a class="header-anchor" href="#_2-字典的运算"><span>2 字典的运算</span></a></h4><p>对于字典类型来说，成员运算和索引运算肯定是很重要的，前者可以判定指定的键在不在字典中，后者可以通过键获取对应的值或者向字典中添加新的键值对。值得注意的是，字典的索引不同于列表的索引，列表中的元素因为有属于自己有序号，所以列表的索引是一个整数；字典中因为保存的是键值对，所以字典需要用键去索引对应的值。需要<strong>特别提醒</strong>大家注意的是，<strong>字典中的键必须是不可变类型</strong>，例如整数（<code>int</code>）、浮点数（<code>float</code>）、字符串（<code>str</code>）、元组（<code>tuple</code>）等类型，这一点跟集合类型对元素的要求是一样的；很显然，之前我们讲的列表（<code>list</code>）和集合（<code>set</code>）不能作为字典中的键，字典类型本身也不能再作为字典中的键，因为字典也是可变类型，但是字典可以作为字典中的值。大家可以先看看下面的代码，了解一下字典的成员运算和索引运算。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">person <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;王大锤&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token string">&#39;height&#39;</span><span class="token punctuation">:</span> <span class="token number">168</span><span class="token punctuation">,</span> <span class="token string">&#39;weight&#39;</span><span class="token punctuation">:</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token string">&#39;addr&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;成都市武侯区科华北路62号1栋101&#39;</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 成员运算</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span> <span class="token keyword">in</span> person<span class="token punctuation">)</span>  <span class="token comment"># True</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;tel&#39;</span> <span class="token keyword">in</span> person<span class="token punctuation">)</span>   <span class="token comment"># False</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 索引运算</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">[</span><span class="token string">&#39;addr&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">person<span class="token punctuation">[</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">25</span></span>
<span class="line">person<span class="token punctuation">[</span><span class="token string">&#39;height&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">178</span></span>
<span class="line">person<span class="token punctuation">[</span><span class="token string">&#39;tel&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;13122334455&#39;</span></span>
<span class="line">person<span class="token punctuation">[</span><span class="token string">&#39;signature&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;你的男朋友是一个盖世垃圾，他会踏着五彩祥云去迎娶你的闺蜜&#39;</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 循环遍历</span></span>
<span class="line"><span class="token keyword">for</span> key <span class="token keyword">in</span> person<span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>key<span class="token punctuation">}</span></span><span class="token string">:\\t</span><span class="token interpolation"><span class="token punctuation">{</span>person<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意，在通过索引运算获取字典中的值时，如指定的键没有在字典中，将会引发<code>KeyError</code>异常。</p><h4 id="_3-字典的方法" tabindex="-1"><a class="header-anchor" href="#_3-字典的方法"><span>3 字典的方法</span></a></h4><p>字典类型的方法基本上都跟字典的键值对操作相关，其中<code>get</code>方法可以通过键来获取对应的值。跟索引运算不同的是，<code>get</code>方法在字典中没有指定的键时不会产生异常，而是返回<code>None</code>或指定的默认值，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">person <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&#39;王大锤&#39;</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">55</span><span class="token punctuation">,</span> height<span class="token operator">=</span><span class="token number">168</span><span class="token punctuation">,</span> weight<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">,</span> addr<span class="token operator">=</span><span class="token string">&#39;成都市武侯区科华北路62号1栋101&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment"># 王大锤</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;sex&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># None</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;sex&#39;</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># True 指定默认值</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要获取字典中所有的键，可以使用<code>keys</code>方法；如果需要获取字典中所有的值，可以使用<code>values</code>方法。字典还有一个名为<code>items</code>的方法，它会将键和值组装成二元组，通过该方法来遍历字典中的元素也是非常方便的</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># dict_keys([&#39;name&#39;, &#39;age&#39;, &#39;height&#39;, &#39;weight&#39;, &#39;addr&#39;])</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># dict_values([&#39;王大锤&#39;, 25, 178])</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># dict_items([(&#39;name&#39;, &#39;王大锤&#39;), (&#39;age&#39;, 25), (&#39;height&#39;, 178)])</span></span>
<span class="line"><span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> person<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">for</span> key <span class="token keyword">in</span> person<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字典的<code>update</code>方法会用一个字典更新另一个字典中的键值对。例如，有两个字典<code>x</code>和<code>y</code>，当执行<code>x.update(y)</code>操作时，<code>x</code>跟<code>y</code>相同的键对应的值会<code>y</code>中的值被更新，而<code>y</code>中有但<code>x</code>中没有的键值对会直接添加到<code>x</code>中，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">person1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;王大锤&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token string">&#39;height&#39;</span><span class="token punctuation">:</span> <span class="token number">178</span><span class="token punctuation">}</span></span>
<span class="line">person2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">&#39;addr&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;成都市武侯区科华北路62号1栋101&#39;</span><span class="token punctuation">}</span></span>
<span class="line">person1<span class="token punctuation">.</span>update<span class="token punctuation">(</span>person2<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span>  <span class="token comment"># {&#39;name&#39;: &#39;王大锤&#39;, &#39;age&#39;: 25, &#39;height&#39;: 178, &#39;addr&#39;: &#39;成都市武侯区科华北路62号1栋101&#39;}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以通过<code>pop</code>或<code>popitem</code>方法从字典中删除元素，前者会返回键对应的值，但是如果字典中不存在指定的键，会引发<code>KeyError</code>错误；后者在删除元素时，会返回键和值组成的二元组。字典的<code>clear</code>方法会清空字典中所有的键值对，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">person <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;王大锤&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">&#39;height&#39;</span><span class="token punctuation">:</span> <span class="token number">178</span><span class="token punctuation">,</span> <span class="token string">&#39;addr&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;成都市武侯区科华北路62号1栋101&#39;</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 25</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>             <span class="token comment"># {&#39;name&#39;: &#39;王大锤&#39;, &#39;height&#39;: 178, &#39;addr&#39;: &#39;成都市武侯区科华北路62号1栋101&#39;}</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>popitem<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># (&#39;addr&#39;, &#39;成都市武侯区科华北路62号1栋101&#39;)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>             <span class="token comment"># {&#39;name&#39;: &#39;王大锤&#39;, &#39;height&#39;: 178}</span></span>
<span class="line">person<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>             <span class="token comment"># {}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>跟列表一样，从字典中删除元素也可以使用<code>del</code>关键字，在删除元素的时候如果指定的键索引不到对应的值，一样会引发<code>KeyError</code>错误，具体的做法如下所示。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">person <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;王大锤&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">&#39;height&#39;</span><span class="token punctuation">:</span> <span class="token number">178</span><span class="token punctuation">,</span> <span class="token string">&#39;addr&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;成都市武侯区科华北路62号1栋101&#39;</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">del</span> person<span class="token punctuation">[</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">del</span> person<span class="token punctuation">[</span><span class="token string">&#39;addr&#39;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>  <span class="token comment"># {&#39;name&#39;: &#39;王大锤&#39;, &#39;height&#39;: 178}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-字典的应用" tabindex="-1"><a class="header-anchor" href="#_4-字典的应用"><span>4 字典的应用</span></a></h4><p><strong>例子1</strong>：输入一段话，统计每个英文字母出现的次数，按出现次数从高到低输出。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">sentence <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&#39;请输入一段话: &#39;</span><span class="token punctuation">)</span></span>
<span class="line">dian <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">for</span> ch <span class="token keyword">in</span> sentence<span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">if</span> word <span class="token keyword">in</span> dian<span class="token punctuation">:</span></span>
<span class="line">        dian<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line">    <span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">        dian<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line">sorted_keys <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>dian<span class="token punctuation">,</span> key<span class="token operator">=</span>dian<span class="token punctuation">.</span>get<span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">for</span> key <span class="token keyword">in</span> sorted_keys<span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>key<span class="token punctuation">}</span></span><span class="token string"> 出现了 </span><span class="token interpolation"><span class="token punctuation">{</span>dian<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string"> 次.&#39;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>例子2</strong>：在一个字典中保存了股票的代码和价格，找出股价大于100元的股票并创建一个新的字典</p><blockquote><p><strong>说明</strong>：可以用字典的生成式语法来创建这个新字典。</p></blockquote><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"></span>
<span class="line">stocks <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string">&#39;AAPL&#39;</span><span class="token punctuation">:</span> <span class="token number">191.88</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;GOOG&#39;</span><span class="token punctuation">:</span> <span class="token number">1186.96</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;IBM&#39;</span><span class="token punctuation">:</span> <span class="token number">149.24</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;ORCL&#39;</span><span class="token punctuation">:</span> <span class="token number">48.44</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;ACN&#39;</span><span class="token punctuation">:</span> <span class="token number">166.89</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;FB&#39;</span><span class="token punctuation">:</span> <span class="token number">208.09</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;SYMC&#39;</span><span class="token punctuation">:</span> <span class="token number">21.29</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>stocks<span class="token punctuation">)</span></span>
<span class="line">item3 <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> stocks<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> stocks <span class="token keyword">if</span> stocks<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">100</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>item3<span class="token punctuation">)</span></span>
<span class="line">或</span>
<span class="line">stocks <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string">&#39;AAPL&#39;</span><span class="token punctuation">:</span> <span class="token number">191.88</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;GOOG&#39;</span><span class="token punctuation">:</span> <span class="token number">1186.96</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;IBM&#39;</span><span class="token punctuation">:</span> <span class="token number">149.24</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;ORCL&#39;</span><span class="token punctuation">:</span> <span class="token number">48.44</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;ACN&#39;</span><span class="token punctuation">:</span> <span class="token number">166.89</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;FB&#39;</span><span class="token punctuation">:</span> <span class="token number">208.09</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;SYMC&#39;</span><span class="token punctuation">:</span> <span class="token number">21.29</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">stocks2 <span class="token operator">=</span> <span class="token punctuation">{</span>key<span class="token punctuation">:</span> value <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> stocks<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> value <span class="token operator">&gt;</span> <span class="token number">100</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>stocks2<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>last</p><p>Python 程序中的字典跟现实生活中字典非常像，允许我们<strong>以键值对的形式保存数据</strong>，再<strong>通过键索引对应的值</strong>。这是一种非常<strong>有利于数据检索</strong>的数据类型。再次提醒大家注意，<strong>字典中的键必须是不可变类型</strong>，字典中的值可以是任意类型。</p><h2 id="_2-函数与模块" tabindex="-1"><a class="header-anchor" href="#_2-函数与模块"><span>2 函数与模块</span></a></h2><p>我们先来研究一道数学题，请说出下面的方程有多少组正整数解。 $$ x_1 + x_2 + x_3 + x_4 = 8 $$</p><p>你可能已经想到了，这个问题其实等同于将8个苹果分成四组且每组至少一个苹果有多少种方案，也等价于在分隔8个苹果的7个间隙之间放入三个隔断将苹果分成四组有多少种方案，所以答案是$ C_7^3=35 $，其中，$C_{7}^{3}$代表7选3的组合数，其计算公式如下所示。 $$ C_m^n = \\frac {m!} {n!(m-n)!} $$</p><p>根据之前学习的知识，我们可以用循环做累乘的方式分别计算出$m!$、$n!$和$(m-n)!$，然后再通过除法运算得到组合数$C_m^n$，代码如下所示。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">&quot;&quot;&quot;</span>
<span class="line">输入m和n，计算组合数C(m,n)的值</span>
<span class="line">&quot;&quot;&quot;</span>
<span class="line"></span>
<span class="line">m = int(input(&#39;m = &#39;))</span>
<span class="line">n = int(input(&#39;n = &#39;))</span>
<span class="line"># 计算m的阶乘</span>
<span class="line">fm = 1</span>
<span class="line">for num in range(1, m + 1):</span>
<span class="line">    fm *= num</span>
<span class="line"># 计算n的阶乘</span>
<span class="line">fn = 1</span>
<span class="line">for num in range(1, n + 1):</span>
<span class="line">    fn *= num</span>
<span class="line"># 计算m-n的阶乘</span>
<span class="line">fk = 1</span>
<span class="line">for num in range(1, m - n + 1):</span>
<span class="line">    fk *= num</span>
<span class="line"># 计算C(M,N)的值</span>
<span class="line">print(fm // fn // fk)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输入：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">m = 7</span>
<span class="line">n = 3</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">35</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>不知大家是否注意到，上面的代码中我们做了三次求阶乘的操作，虽然$m$、$n$、$m - n$的值各不相同，但是三段代码并没有实质性的区别，属于重复代码。世界级的编程大师<em>Martin Fowler</em>曾经说过：“<strong>代码有很多种坏味道，重复是最坏的一种！</strong>”。要写出高质量的代码，首先就要解决重复代码的问题。对于上面的代码来说，我们可以将求阶乘的功能封装到一个称为“函数”的代码块中，在需要计算阶乘的地方，我们只需“调用函数”即可实现对求阶乘功能的复用。</p><h5 id="_1-定义函数" tabindex="-1"><a class="header-anchor" href="#_1-定义函数"><span>1 定义函数</span></a></h5><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">def(关键字) function（函数名）(arg1, arg2):</span>
<span class="line">	return &quot;Something&quot;（返回结果： 没有的话则返回None）</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-函数的参数" tabindex="-1"><a class="header-anchor" href="#_2-函数的参数"><span>2 函数的参数</span></a></h5><p>位置参数和关键字参数</p><p>我们再来写一个函数，根据给出的三条边的长度判断是否可以构成三角形，如果可以构成三角形则返回<code>True</code>，否则返回<code>False</code>，代码如下所示。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">def make_judgement(a, b, c):</span>
<span class="line">    &quot;&quot;&quot;判断三条边的长度能否构成三角形&quot;&quot;&quot;</span>
<span class="line">    return a + b &gt; c and b + c &gt; a and a + c &gt; b</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面<code>make_judgement</code>函数有三个参数，这种参数叫做位置参数，在调用函数时通常按照从左到右的顺序依次传入，而且传入参数的数量必须和定义函数时参数的数量相同，如下所示。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">print(make_judgement(1, 2, 3))  # False</span>
<span class="line">print(make_judgement(4, 5, 6))  # True</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不想按照从左到右的顺序依次给出<code>a</code>、<code>b</code>、<code>c</code> 三个参数的值，也可以使用关键字参数，通过“参数名=参数值”的形式为函数传入参数，如下所示。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">print(make_judgement(b=2, c=3, a=1))  # False</span>
<span class="line">print(make_judgement(c=6, b=4, a=5))  # True</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在定义函数时，我们可以在参数列表中用<code>/</code>设置<strong>强制位置参数</strong>（<em>positional-only arguments</em>），用<code>*</code>设置<strong>命名关键字参数</strong>。所谓强制位置参数，就是调用函数时只能按照参数位置来接收参数值的参数；而命名关键字参数只能通过“参数名=参数值”的方式来传递和接收参数,可以看看下面代码</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token comment"># /前面的参数是强制位置参数</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">make_judgement</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token operator">/</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;判断三条边的长度能否构成三角形&quot;&quot;&quot;</span></span>
<span class="line">    <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">&gt;</span> c <span class="token keyword">and</span> b <span class="token operator">+</span> c <span class="token operator">&gt;</span> a <span class="token keyword">and</span> a <span class="token operator">+</span> c <span class="token operator">&gt;</span> b</span>
<span class="line"><span class="token comment"># 下面的代码会产生TypeError错误，错误信息提示“强制位置参数是不允许给出参数名的”</span></span>
<span class="line"><span class="token comment"># TypeError: make_judgement() got some positional-only arguments passed as keyword arguments</span></span>
<span class="line"><span class="token comment"># print(make_judgement(b=2, c=3, a=1))</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>说明</strong>：强制位置参数是 Python 3.8 引入的新特性，在使用低版本的 Python 解释器时需要注意。</p></blockquote><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token comment"># *后面的参数是命名关键字参数</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">make_judgement</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;判断三条边的长度能否构成三角形&quot;&quot;&quot;</span></span>
<span class="line">    <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">&gt;</span> c <span class="token keyword">and</span> b <span class="token operator">+</span> c <span class="token operator">&gt;</span> a <span class="token keyword">and</span> a <span class="token operator">+</span> c <span class="token operator">&gt;</span> b</span>
<span class="line"><span class="token comment"># 下面的代码会产生TypeError错误，错误信息提示“函数没有位置参数但却给了3个位置参数”</span></span>
<span class="line"><span class="token comment"># TypeError: make_judgement() takes 0 positional arguments but 3 were given</span></span>
<span class="line"><span class="token comment"># print(make_judgement(1, 2, 3))</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数的默认值</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;三个数相加求和&quot;&quot;&quot;</span></span>
<span class="line">    <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c</span>
<span class="line"><span class="token comment"># 调用add函数，没有传入参数，那么a、b、c都使用默认值0</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>add<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment"># 0</span></span>
<span class="line"><span class="token comment"># 调用add函数，传入一个参数，该参数赋值给变量a, 变量b和c使用默认值0</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 1</span></span>
<span class="line"><span class="token comment"># 调用add函数，传入两个参数，分别赋值给变量a和b，变量c使用默认值0</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment"># 3</span></span>
<span class="line"><span class="token comment"># 调用add函数，传入三个参数，分别赋值给a、b、c三个变量</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 6</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，<strong>带默认值的参数必须放在不带默认值的参数之后</strong>，否则将产生<code>SyntaxError</code>错误，错误消息是：<code>non-default argument follows default argument</code>，翻译成中文的意思是“没有默认值的参数放在了带默认值的参数后面”。</p><p>可变参数</p><p>Python 语言中可以通过星号表达式语法让函数支持可变参数。所谓可变参数指的是在调用函数时，可以向函数传入<code>0</code>个或任意多个参数</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token comment"># 用星号表达式来表示args可以接收0个或任意多个参数</span></span>
<span class="line"><span class="token comment"># 调用函数时传入的n个参数会组装成一个n元组赋给args</span></span>
<span class="line"><span class="token comment"># 如果一个参数都没有传入，那么args会是一个空元组</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    total <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">    <span class="token comment"># 对保存可变参数的元组进行循环遍历</span></span>
<span class="line">    <span class="token keyword">for</span> val <span class="token keyword">in</span> args<span class="token punctuation">:</span></span>
<span class="line">        <span class="token comment"># 对参数进行了类型检查（数值型的才能求和）</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token builtin">type</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">            total <span class="token operator">+=</span> val</span>
<span class="line">    <span class="token keyword">return</span> total</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 在调用add函数时可以传入0个或任意多个参数</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>add<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment"># 0</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 1</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 6</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token number">3.45</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 12.45</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们希望通过“参数名=参数值”的形式传入若干个参数，具体有多少个参数也是不确定的，我们还可以给函数添加可变关键字参数，把传入的关键字参数组装到一个字典中，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token comment"># 参数列表中的**kwargs可以接收0个或任意多个关键字参数</span></span>
<span class="line"><span class="token comment"># 调用函数时传入的关键字参数会组装成一个字典（参数名是字典中的键，参数值是字典中的值）</span></span>
<span class="line"><span class="token comment"># 如果一个关键字参数都没有传入，那么kwargs会是一个空字典</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">foo<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2.1</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&#39;骆昊&#39;</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">43</span><span class="token punctuation">,</span> gpa<span class="token operator">=</span><span class="token number">4.95</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># (3, 2.1, True)</span></span>
<span class="line"><span class="token comment"># {&#39;name&#39;: &#39;骆昊&#39;, &#39;age&#39;: 43, &#39;gpa&#39;: 4.95}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-用模块管理函数" tabindex="-1"><a class="header-anchor" href="#_3-用模块管理函数"><span>3 用模块管理函数</span></a></h5><p>不管用什么样的编程语言来写代码，给变量、函数起名字都是一个让人头疼的问题，因为我们会遇到<strong>命名冲突</strong>这种尴尬的情况。最简单的场景就是在同一个<code>.py</code>文件中定义了两个同名的函数，如下所示。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">def foo():</span>
<span class="line">    print(&#39;hello, world!&#39;)</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">def foo():</span>
<span class="line">    print(&#39;goodbye, world!&#39;)</span>
<span class="line"></span>
<span class="line">    </span>
<span class="line">foo()  # 大家猜猜调用foo函数会输出什么 goodbye, world!</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Python 中每个文件就代表了一个模块（module），我们在不同的模块中可以有同名的函数，在使用函数的时候，我们通过<code>import</code>关键字导入指定的模块再使用<strong>完全限定名</strong>（<code>模块名.函数名</code>）的调用方式，就可以区分到底要使用的是哪个模块中的<code>foo</code>函数，代码如下所示。</p><p>module1.py</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;hello, world!&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>module2.py</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;goodbye, world!&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>test.py</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">import</span> module1</span>
<span class="line"><span class="token keyword">import</span> module2</span>
<span class="line"><span class="token comment"># 用“模块名.函数名”的方式（完全限定名）调用函数，</span></span>
<span class="line">module1<span class="token punctuation">.</span>foo<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># hello, world!</span></span>
<span class="line">module2<span class="token punctuation">.</span>foo<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># goodbye, world</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在导入模块时，还可以使用<code>as</code>关键字对模块进行别名，这样我们可以使用更为简短的完全限定名。</p><p>test.py</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line"><span class="token keyword">import</span> module1 <span class="token keyword">as</span> m1</span>
<span class="line"><span class="token keyword">import</span> module2 <span class="token keyword">as</span> m2</span>
<span class="line"></span>
<span class="line">m1<span class="token punctuation">.</span>foo<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># hello, world!</span></span>
<span class="line">m2<span class="token punctuation">.</span>foo<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># goodbye, world!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面两段代码，我们导入的是定义函数的模块，我们也可以使用<code>from...import...</code>语法从模块中直接导入需要使用的函数，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">test<span class="token punctuation">.</span>py</span>
<span class="line"><span class="token keyword">from</span> module1 <span class="token keyword">import</span> foo</span>
<span class="line"></span>
<span class="line">foo<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># hello, world!</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">from</span> module2 <span class="token keyword">import</span> foo</span>
<span class="line"></span>
<span class="line">foo<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># goodbye, world!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是，如果我们如果从两个不同的模块中导入了同名的函数，后面导入的函数会替换掉之前的导入，就像下面的代码，调用<code>foo</code>会输出<code>goodbye, world!</code>，因为我们先导入了<code>module1</code>的<code>foo</code>，后导入了<code>module2</code>的<code>foo</code> 。如果两个<code>from...import...</code>反过来写，那就是另外一番光景了。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">test<span class="token punctuation">.</span>py</span>
<span class="line"><span class="token keyword">from</span> module1 <span class="token keyword">import</span> foo</span>
<span class="line"><span class="token keyword">from</span> module2 <span class="token keyword">import</span> foo</span>
<span class="line"></span>
<span class="line">foo<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># goodbye, world!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想在上面的代码中同时使用来自两个模块的<code>foo</code>函数还是有办法的，大家可能已经猜到了，还是用<code>as</code>关键字对导入的函数进行别名，代码如下所示。</p><div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="line">test<span class="token punctuation">.</span>py</span>
<span class="line"><span class="token keyword">from</span> module1 <span class="token keyword">import</span> foo <span class="token keyword">as</span> f1</span>
<span class="line"><span class="token keyword">from</span> module2 <span class="token keyword">import</span> foo <span class="token keyword">as</span> f2</span>
<span class="line"></span>
<span class="line">f1<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># hello, world!</span></span>
<span class="line">f2<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># goodbye, world!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="标准库中的模块和函数" tabindex="-1"><a class="header-anchor" href="#标准库中的模块和函数"><span>标准库中的模块和函数</span></a></h3><p>Python 标准库中提供了大量的模块和函数来简化我们的开发工作，我们之前用过的<code>random</code>模块就为我们提供了生成随机数和进行随机抽样的函数；而<code>time</code>模块则提供了和时间操作相关的函数；我们之前用到过的<code>math</code>模块中还包括了计算正弦、余弦、指数、对数等一系列的数学函数。随着我们深入学习 Python 语言，我们还会用到更多的模块和函数。</p><p>Python 标准库中还有一类函数是不需要<code>import</code>就能够直接使用的，我们将其称之为<strong>内置函数</strong>，这些内置函数不仅有用而且还很常用，下面的表格列出了一部分的内置函数。</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><code>abs</code></td><td>返回一个数的绝对值，例如：<code>abs(-1.3)</code>会返回<code>1.3</code>。</td></tr><tr><td><code>bin</code></td><td>把一个整数转换成以<code>&#39;0b&#39;</code>开头的二进制字符串，例如：<code>bin(123)</code>会返回<code>&#39;0b1111011&#39;</code>。</td></tr><tr><td><code>chr</code></td><td>将Unicode编码转换成对应的字符，例如：<code>chr(8364)</code>会返回<code>&#39;€&#39;</code>。</td></tr><tr><td><code>hex</code></td><td>将一个整数转换成以<code>&#39;0x&#39;</code>开头的十六进制字符串，例如：<code>hex(123)</code>会返回<code>&#39;0x7b&#39;</code>。</td></tr><tr><td><code>input</code></td><td>从输入中读取一行，返回读到的字符串。</td></tr><tr><td><code>len</code></td><td>获取字符串、列表等的长度。</td></tr><tr><td><code>max</code></td><td>返回多个参数或一个可迭代对象中的最大值，例如：<code>max(12, 95, 37)</code>会返回<code>95</code>。</td></tr><tr><td><code>min</code></td><td>返回多个参数或一个可迭代对象中的最小值，例如：<code>min(12, 95, 37)</code>会返回<code>12</code>。</td></tr><tr><td><code>oct</code></td><td>把一个整数转换成以<code>&#39;0o&#39;</code>开头的八进制字符串，例如：<code>oct(123)</code>会返回<code>&#39;0o173&#39;</code>。</td></tr><tr><td><code>open</code></td><td>打开一个文件并返回文件对象。</td></tr><tr><td><code>ord</code></td><td>将字符转换成对应的Unicode编码，例如：<code>ord(&#39;€&#39;)</code>会返回<code>8364</code>。</td></tr><tr><td><code>pow</code></td><td>求幂运算，例如：<code>pow(2, 3)</code>会返回<code>8</code>；<code>pow(2, 0.5)</code>会返回<code>1.4142135623730951</code>。</td></tr><tr><td><code>print</code></td><td>打印输出。</td></tr><tr><td><code>range</code></td><td>构造一个范围序列，例如：<code>range(100)</code>会产生<code>0</code>到<code>99</code>的整数序列。</td></tr><tr><td><code>round</code></td><td>按照指定的精度对数值进行四舍五入，例如：<code>round(1.23456, 4)</code>会返回<code>1.2346</code>。</td></tr><tr><td><code>sum</code></td><td>对一个序列中的项从左到右进行求和运算，例如：<code>sum(range(1, 101))</code>会返回<code>5050</code>。</td></tr><tr><td><code>type</code></td><td>返回对象的类型，例如：<code>type(10)</code>会返回<code>int</code>；而<code> type(&#39;hello&#39;)</code>会返回<code>str</code>。</td></tr></tbody></table>`,414),c=[t];function o(l,i){return s(),a("div",null,c)}const d=n(e,[["render",o],["__file","index.html.vue"]]),r=JSON.parse(`{"path":"/category/server/python/","title":"Python","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"1 基础语法","slug":"_1-基础语法","link":"#_1-基础语法","children":[{"level":3,"title":"1.0 字面量","slug":"_1-0-字面量","link":"#_1-0-字面量","children":[]},{"level":3,"title":"1.1 变量和类型","slug":"_1-1-变量和类型","link":"#_1-1-变量和类型","children":[]},{"level":3,"title":"1.2  运算符","slug":"_1-2-运算符","link":"#_1-2-运算符","children":[]},{"level":3,"title":"运算符和表达式应用举例","slug":"运算符和表达式应用举例","link":"#运算符和表达式应用举例","children":[]},{"level":3,"title":"1.3 分支结构","slug":"_1-3-分支结构","link":"#_1-3-分支结构","children":[]},{"level":3,"title":"1.4 循环结构","slug":"_1-4-循环结构","link":"#_1-4-循环结构","children":[]},{"level":3,"title":"1.5 常用数据结构之列表-1","slug":"_1-5-常用数据结构之列表-1","link":"#_1-5-常用数据结构之列表-1","children":[]},{"level":3,"title":"1.6 常用数据结构之列表-2","slug":"_1-6-常用数据结构之列表-2","link":"#_1-6-常用数据结构之列表-2","children":[]},{"level":3,"title":"1.7 常用数据结构之元组","slug":"_1-7-常用数据结构之元组","link":"#_1-7-常用数据结构之元组","children":[]},{"level":3,"title":"1.8 字符串","slug":"_1-8-字符串","link":"#_1-8-字符串","children":[]},{"level":3,"title":"1. 9 常用数据结构之集合","slug":"_1-9-常用数据结构之集合","link":"#_1-9-常用数据结构之集合","children":[]},{"level":3,"title":"1.10 常用数据结构之字典(dictionary)","slug":"_1-10-常用数据结构之字典-dictionary","link":"#_1-10-常用数据结构之字典-dictionary","children":[]}]},{"level":2,"title":"2 函数与模块","slug":"_2-函数与模块","link":"#_2-函数与模块","children":[{"level":3,"title":"标准库中的模块和函数","slug":"标准库中的模块和函数","link":"#标准库中的模块和函数","children":[]}]}],"git":{"updatedTime":1722182159000,"contributors":[{"name":"codePiece","email":"1749967714@qq.com","commits":1}]},"filePathRelative":"category/server/python/README.md","excerpt":"\\n<p>视频链接：https://www.bilibili.com/video/BV1qW4y1a7fU?p=14&amp;vd_source=58161f8e8dab38b1ec22c77ea9cc9e71</p>\\n<p>官网文档：https://docs.python.org/</p>\\n<p>仅供参考</p>\\n<h4>集成开发环境 - PyCharm</h4>\\n<h2>1 基础语法</h2>\\n<h3>1.0 字面量</h3>\\n<p>​\\t\\t字面量：在代码中，被<strong>写下来</strong>的的固定的<strong>值</strong>，称之为字面量</p>\\n<div class=\\"language-python\\" data-ext=\\"py\\" data-title=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"line\\"><span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'hello world'</span><span class=\\"token punctuation\\">)</span> \\t此处的\\t<span class=\\"token string\\">'hello world'</span>\\t就是string 字面量</span>\\n<span class=\\"line\\"></span></code></pre></div>"}`);export{d as comp,r as data};
